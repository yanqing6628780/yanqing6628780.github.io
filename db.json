{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/maupassant_sam/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant_sam/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/maupassant_sam/source/css/jquery.fancybox.css","path":"css/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/maupassant_sam/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/maupassant_sam/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/maupassant_sam/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant_sam/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/maupassant_sam/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/maupassant_sam/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant_sam/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant_sam/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/maupassant_sam/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/maupassant_sam/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant_sam/source/js/share.js","path":"js/share.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/maupassant_sam/LICENSE","hash":"b7ea1dbb2fed3410d78bc7c125e1d80927b56981","modified":1488271191733},{"_id":"themes/maupassant_sam/_config.yml","hash":"b112d6272c33c27be481af377cfa9644eafa49c8","modified":1488438524834},{"_id":"themes/maupassant_sam/package.json","hash":"04ca87ea475f37841d3610fe5806feb8022416c3","modified":1488529122304},{"_id":"themes/maupassant_sam/.travis.yml","hash":"f8da426b97088e4caa5226cff219a5d95087961f","modified":1488271191730},{"_id":"source/_posts/angular-component-formcontrol.md","hash":"4745712072f0776543defc0a4ba35d0c5f7422c0","modified":1526377018489},{"_id":"source/_posts/angular-testing.md","hash":"0f58fd110c515a6353d2936c4d04c506d5a6a003","modified":1526376995639},{"_id":"source/_posts/angular-ubus-openwrt.md","hash":"e194687a0083204eed34cf498df21ab1a9575cd3","modified":1526377001926},{"_id":"source/_posts/docker-mount.md","hash":"cec6869cbf7aee33647a70d4ded81cb9f4cb4950","modified":1526376844464},{"_id":"source/_posts/karma-config-note-2.md","hash":"717ce6af58fb8f2314ad823ff53d2ffc3ad2e93a","modified":1526376848460},{"_id":"source/_posts/karma-config-note.md","hash":"c103a1f109a5d6ec047b63f8f22800c5d14688af","modified":1526376852213},{"_id":"themes/maupassant_sam/layout/archive.jade","hash":"d70d1ed241b1a431a2434768d02bb2de03070f70","modified":1488271191972},{"_id":"source/categories/index.md","hash":"679f94538641e56360ef36427f8e507191b3d1e7","modified":1487238128041},{"_id":"themes/maupassant_sam/README.md","hash":"1e0e701e5ea813f7951f3fe3dac2de5ccf0ba0db","modified":1488271191749},{"_id":"source/about/index.md","hash":"33b6187650c0871595f60287b7fd78fabc7964fd","modified":1488272075846},{"_id":"themes/maupassant_sam/layout/index.jade","hash":"24447c56462eb86a7a0b08f8d24c3c42451b4c02","modified":1488271192077},{"_id":"themes/maupassant_sam/layout/base-without-sidebar.jade","hash":"deaa33ada3a58fae9f86ef72d934f0fdf846abb9","modified":1488271191975},{"_id":"themes/maupassant_sam/layout/page.jade","hash":"1e98aa785073dc1bbfe70f2863bc19fe287483b9","modified":1488271192081},{"_id":"themes/maupassant_sam/layout/timeline.jade","hash":"ee1e8e4e8fdf61c6d19f1f7fe31ab50ab1465a8d","modified":1488271192091},{"_id":"themes/maupassant_sam/layout/base.jade","hash":"1a5f473b3b49f0feb6758e9dcb61342446283cc7","modified":1488271192066},{"_id":"themes/maupassant_sam/layout/single-column.jade","hash":"4be14ac93c154216e174fe0c4c05608c26f59c42","modified":1488271192088},{"_id":"themes/maupassant_sam/languages/de-DE.yml","hash":"25d1d8cd8113045a7603c14af1ea1539fc6456ed","modified":1488271191754},{"_id":"themes/maupassant_sam/languages/en.yml","hash":"6c5fc2cec7e44306d97bc7902e9765389d21c363","modified":1488271191757},{"_id":"themes/maupassant_sam/languages/es-ES.yml","hash":"3cc9312fbdba4a8f8e8254804121e4724c719bcc","modified":1488271191760},{"_id":"themes/maupassant_sam/languages/fr-FR.yml","hash":"3a50568f200b9c1258415b53727e42c6b6c7ea0b","modified":1488271191763},{"_id":"themes/maupassant_sam/layout/post.jade","hash":"f68f483242409f501bbc8b50ff129edd981087e2","modified":1488271192085},{"_id":"themes/maupassant_sam/languages/ko.yml","hash":"a454bcec60113507bc1d593a699849822386c196","modified":1488271191766},{"_id":"themes/maupassant_sam/layout/_partial/comments.jade","hash":"b3a0b0ce0642f2bfe9df94b075c0c2a083871e1b","modified":1488271191795},{"_id":"themes/maupassant_sam/languages/zh-TW.yml","hash":"46659764e31c7866af436d98d4fabb9da122037a","modified":1488271191783},{"_id":"themes/maupassant_sam/layout/_partial/helpers.jade","hash":"9e44f6d32f2449b4109c33118f8285fa2fc7b023","modified":1488271191814},{"_id":"themes/maupassant_sam/layout/_partial/footer.jade","hash":"87e096caac8e780c0894ef1844f59246f861bbe7","modified":1488271191798},{"_id":"themes/maupassant_sam/languages/zh-CN.yml","hash":"41f7c09365cbd5ba1b8906191ee07bc75094185a","modified":1488271191780},{"_id":"themes/maupassant_sam/layout/_partial/mathjax.jade","hash":"ac6e3a92bf18ab6bbd0e041b6796b295bae963ee","modified":1488271191817},{"_id":"themes/maupassant_sam/layout/_partial/mathjax2.jade","hash":"234a792e64ba208fa97d2f99772ece23056a53ec","modified":1488271191819},{"_id":"themes/maupassant_sam/layout/_partial/paginator.jade","hash":"03ad0c49ae6f8a999ae35b38d08e25775f51f52a","modified":1488271191821},{"_id":"themes/maupassant_sam/layout/_partial/post_nav.jade","hash":"b11d9e6000449838b17f508429f29ffb60f53096","modified":1488271191824},{"_id":"themes/maupassant_sam/layout/_partial/tag.jade","hash":"6145b483b271bba05ad1db7c039fe352a768215b","modified":1488271191826},{"_id":"themes/maupassant_sam/layout/_partial/totop.jade","hash":"eb91a3baf9411188c7c8130f63a674f541ca9c81","modified":1488271191829},{"_id":"themes/maupassant_sam/layout/_widget/recent_comments.jade","hash":"0b9e78e7f20bc69690e05f2e0c956bded9058a84","modified":1488271191837},{"_id":"themes/maupassant_sam/layout/_widget/category.jade","hash":"7707b4c718a935882ee986d0bb0078e50cdbea64","modified":1488271191832},{"_id":"themes/maupassant_sam/layout/_widget/search.jade","hash":"c5301ca7f2ec24d790fd7f35f69f8fd8acbdb725","modified":1488271191967},{"_id":"themes/maupassant_sam/layout/_widget/recent_posts.jade","hash":"770b6c41cbf7969ed33adf87eec3be6f50a0911b","modified":1488271191950},{"_id":"themes/maupassant_sam/layout/_widget/links.jade","hash":"2a1dd6a0e2befd073e3347347994d8dcd2047879","modified":1488271191834},{"_id":"themes/maupassant_sam/source/css/style.scss","hash":"17ec17e219f9eceb1a1ef7836fd63dcc1a47b5a0","modified":1488272258037},{"_id":"themes/maupassant_sam/layout/_partial/after_footer.jade","hash":"7e69266c3d1b9d872617046ca0630998200072fd","modified":1488271191790},{"_id":"themes/maupassant_sam/layout/_widget/tag.jade","hash":"37f236365b153fc40324391e5a602d6d50014e18","modified":1488271191969},{"_id":"themes/maupassant_sam/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1488271192157},{"_id":"themes/maupassant_sam/source/css/jquery.fancybox.css","hash":"0d142e11e27e9de1a325c32369c42254101ddd34","modified":1488271192100},{"_id":"themes/maupassant_sam/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1488271192105},{"_id":"themes/maupassant_sam/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1488271192158},{"_id":"themes/maupassant_sam/source/js/codeblock-resizer.js","hash":"c77270e684a60babc1abb7353e700ecdc5a66d30","modified":1488271192179},{"_id":"themes/maupassant_sam/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1488271192106},{"_id":"themes/maupassant_sam/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1488271192160},{"_id":"themes/maupassant_sam/source/js/fancybox.js","hash":"8a993c1c4ad40789d2960b682cb2130382a0f26a","modified":1488271192185},{"_id":"themes/maupassant_sam/source/js/smartresize.js","hash":"150ab1cad40d7ae081b0896b13f7d7cbac4e6338","modified":1488271192280},{"_id":"themes/maupassant_sam/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1488271192107},{"_id":"themes/maupassant_sam/source/js/totop.js","hash":"15de186b089c245fe60766d509b587919f05ff23","modified":1488271192284},{"_id":"themes/maupassant_sam/source/js/search.js","hash":"dbda07a03e6edc73f1dc28a068c24a6037b97b56","modified":1488271192193},{"_id":"themes/maupassant_sam/source/js/share.js","hash":"bb6880e2e8e187b576daf326476f09b0907fbe14","modified":1488271192202},{"_id":"public/content.json","hash":"87b4da57785943c2a655b6e9c149d7ae0482c32c","modified":1526377048854},{"_id":"public/atom.xml","hash":"e3dcebaf5721d5d27a12bda6cd7cbe30799d586e","modified":1526377048851},{"_id":"public/search.xml","hash":"3329214081ada0fda42aeeadcdf54ced931d8960","modified":1526377048854},{"_id":"public/categories/index.html","hash":"a8cb0e2699c96c0f2c0bab257de6fed0cf8c5b17","modified":1526377048863},{"_id":"public/about/index.html","hash":"d4e3762282972eee4986dad86b3ac7fea9f09e19","modified":1526377048863},{"_id":"public/2018/05/15/angular-component-formcontrol/index.html","hash":"d2aa73b3b9c0c029aa96fc36b8a38562c7c89397","modified":1526377048864},{"_id":"public/2018/01/11/angular-ubus-openwrt/index.html","hash":"2eaa7b7020bb954ae688fdceceb9463c76e1c08f","modified":1526377048864},{"_id":"public/2018/01/11/docker-mount/index.html","hash":"0dadbcc5e874f026c664733da6960274b59bd45c","modified":1526377048864},{"_id":"public/categories/运维/index.html","hash":"7eb97c8963ad1fea4d45f06c5f44158e720ba16a","modified":1526377048865},{"_id":"public/categories/测试/index.html","hash":"7155c8b70b172b644023927d31acc1e27447c44a","modified":1526377048865},{"_id":"public/index.html","hash":"5ecec2c220cd42ac9ac5466bdca7023d4970da50","modified":1526377048865},{"_id":"public/archives/index.html","hash":"22b2063de8cd56818087fc70e608da9b58436840","modified":1526377048869},{"_id":"public/archives/2017/index.html","hash":"55a4554078ca0e7bc0fa9d7e70012721297c42bd","modified":1526377048869},{"_id":"public/archives/2018/index.html","hash":"3bcbe0dba8b86f632bf26557b2c8c4f575d9cd42","modified":1526377048870},{"_id":"public/archives/2017/02/index.html","hash":"55a4554078ca0e7bc0fa9d7e70012721297c42bd","modified":1526377048870},{"_id":"public/archives/2018/01/index.html","hash":"a7824afe6c315eb7bf13b44f17733f95d1a38cf9","modified":1526377048870},{"_id":"public/archives/2018/05/index.html","hash":"d24cbb6b2724f461e7c72b6ebea78679ceaeb5d8","modified":1526377048870},{"_id":"public/tags/angular/index.html","hash":"8ce0935478faf35fe3bd03f8f0be1b2eb00218cd","modified":1526377048865},{"_id":"public/tags/formControl/index.html","hash":"94d97354cbfd4fff151b3e237a45999a49be68eb","modified":1526377048865},{"_id":"public/2017/02/22/karma-config-note-2/index.html","hash":"e6988031549eaa8de0b7fdf67e42a4f2ef0dab8e","modified":1526377048871},{"_id":"public/2017/02/17/karma-config-note/index.html","hash":"f24c8dc704f3a00fea4177b23cb5359ee365d847","modified":1526377048871},{"_id":"public/2018/05/15/angular-testing/index.html","hash":"2060add8560c32c3254cf61ef460d51597e95989","modified":1526377048864},{"_id":"public/categories/angular/index.html","hash":"3115764abe3cbe3a78289e0e4965776e7fb3cd3c","modified":1526377048864},{"_id":"public/categories/js/index.html","hash":"51622214f2ef91d85f0fd785640360eed9631999","modified":1526376899713},{"_id":"public/categories/angular/js/index.html","hash":"cdceb535825ffed8c6fe6c456c420e46adc4444f","modified":1526376899713},{"_id":"public/categories/js/angular/index.html","hash":"4da0eba95aeb98103b685c13e41dcd474deb2416","modified":1526376899714},{"_id":"public/categories/angular/js/测试/index.html","hash":"4115a15b0f22d7029759719ce24d466201819ebd","modified":1526376899714},{"_id":"public/tags/testing/index.html","hash":"3e04f4d0e7a50e1c4cf5b913d3b3359ed83deeb5","modified":1526377048865},{"_id":"public/tags/openwrt/index.html","hash":"4e884b4ad4191dd9bff1636b881457b91291d51a","modified":1526377048867},{"_id":"public/tags/ubus/index.html","hash":"b3c6c497675045113b0e286e19ac998fc7623f33","modified":1526377048867},{"_id":"public/tags/docker/index.html","hash":"6015e60d808f083e23b049f071ac29174ac27001","modified":1526377048867},{"_id":"public/tags/karma/index.html","hash":"f9764a218d77f9b30f7488dff87ac91bb8fed73f","modified":1526377048868},{"_id":"public/tags/测试框架/index.html","hash":"62762070dd6fc2ff79bc278577854d0e64802dbb","modified":1526377048869},{"_id":"public/tags/docker-compose/index.html","hash":"c49538cce44d6fbbe45f86f5bb2e86ecdc2f4ccb","modified":1526377048868},{"_id":"public/tags/component/index.html","hash":"841c207f35f631ba557ef5272f52c985b7378596","modified":1526377048867},{"_id":"public/tags/angular-testing/index.html","hash":"5f615449c623ab7eefc78b7540a7b14cb92e48b7","modified":1526377048865},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1526376899721},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1526376899721},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1526376899721},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1526376899721},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1526376899721},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1526376899846},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1526376899972},{"_id":"public/css/jquery.fancybox.css","hash":"f42f761157f26244673eb2f4a9215c70956f80dc","modified":1526376899972},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1526376899972},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1526376899972},{"_id":"public/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1526376899972},{"_id":"public/js/search.js","hash":"0c0630e2ef213701d393b041f10572e951a27985","modified":1526376899972},{"_id":"public/js/share.js","hash":"f49776e0baa2b913ddc7a20db24b3edd469c8343","modified":1526376899972},{"_id":"public/css/style.css","hash":"8a6fa3aa36d43fce827f850256c7e1263c0bfabb","modified":1526376899973}],"Category":[{"name":"angular","_id":"cjh7he6qd00022gu2svl9q2rc"},{"name":"js","_id":"cjh7he6r100072gu23flkka6s"},{"name":"运维","_id":"cjh7he6rb000e2gu26zpmouum"},{"name":"js","parent":"cjh7he6qd00022gu2svl9q2rc","_id":"cjh7he6re000g2gu2zlt0b1ip"},{"name":"测试","_id":"cjh7he6rg000j2gu2yacm196u"},{"name":"angular","parent":"cjh7he6r100072gu23flkka6s","_id":"cjh7he6rk000q2gu2chupec4g"},{"name":"测试","parent":"cjh7he6re000g2gu2zlt0b1ip","_id":"cjh7he6ro000x2gu2rr042ols"}],"Data":[],"Page":[{"title":"categories","date":"2017-02-16T17:42:08.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-02-16 17:42:08\n---\n","updated":"2017-02-16T09:42:08.041Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjh7he7aq001i2gu2y3otmoe4","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于  我","date":"2017-02-28T16:52:44.000Z","_content":"\n曾经我以为`php`是世界上最好的语言  \n现在  \n我觉得  \n`JS`也是  \n开玩笑！摔！\n\n现就职于深圳谛听科技  \n捣鼓各种前端工具  \n负责`newifi`和`pandorabox`路由器前端开发\n","source":"about/index.md","raw":"---\ntitle: 关于  我\ndate: 2017-02-28 16:52:44\n---\n\n曾经我以为`php`是世界上最好的语言  \n现在  \n我觉得  \n`JS`也是  \n开玩笑！摔！\n\n现就职于深圳谛听科技  \n捣鼓各种前端工具  \n负责`newifi`和`pandorabox`路由器前端开发\n","updated":"2017-02-28T08:54:35.846Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjh7he7as001j2gu2h95fn6ky","content":"<p>曾经我以为<code>php</code>是世界上最好的语言<br>现在<br>我觉得<br><code>JS</code>也是<br>开玩笑！摔！</p>\n<p>现就职于深圳谛听科技<br>捣鼓各种前端工具<br>负责<code>newifi</code>和<code>pandorabox</code>路由器前端开发</p>\n","site":{"data":{}},"excerpt":"","more":"<p>曾经我以为<code>php</code>是世界上最好的语言<br>现在<br>我觉得<br><code>JS</code>也是<br>开玩笑！摔！</p>\n<p>现就职于深圳谛听科技<br>捣鼓各种前端工具<br>负责<code>newifi</code>和<code>pandorabox</code>路由器前端开发</p>\n"}],"Post":[{"title":"angular-testing","date":"2018-05-15T12:03:55.000Z","_content":"\n这是一篇流水账式记录angular测试时遇到的问题和想法。\n\n在这个项目内的`api.service`，我注入了`HttpClient`、`NzNotificationService`、`router`三个服务。\n在测试`api.service`时，你测试的是`router`服务的`navigate`方法有没有被调用，而且输入什么参数。这时，你要使用`jasmine`的`spy`监视对`router`下的`navigate`方法。而不是，检查浏览器地址栏是否有发生变化。\n难道我们就不要检查浏览器地址栏的变化吗？其实，还是要的。不过，这应该是交给`router`服务本身的测试来做。这才是模块化的思想，各模块能独立加载，有自身的单元测试。  \n\n然后，是对登录页组件的测试。对于`login.spec.ts`这个测试文件的内容，主要还是记录下`jasmine.createSpyObj`这个方法。我用这个方法创建了一个`AuthService`的`spy`。这个`spy`是监视点击登录按钮时，触发的组件内的`submit`函数。`submit`执行时会调用`AuthService`的`login`方法。此时，我们不需要用`httpMock`方式来模拟网络请求数据了，可以直接调用`AuthService.login`(这个服务和方法现在是`jasmine`创建的`spy`)下的`returnValue`来立刻返回结果，这样我们就可以直接测试`authService.login.subscribe`回调函数内的代码。  \n那为什么可以不用`httpMock`模拟网络请求呢？这就是上面提到的各自独立加载和有测试单元了。我们已经对`AuthService`这个服务写过单元测试了，保证了他的功能正常。然后，到我们的对组件测试时，我们就没必要再重复这个模拟过程了。\n\n\n","source":"_posts/angular-testing.md","raw":"---\ntitle: angular-testing\ndate: 2018-05-15 12:03:55\ntags:\n  - testing\n  - angular testing\ncategories:\n  - angular\n---\n\n这是一篇流水账式记录angular测试时遇到的问题和想法。\n\n在这个项目内的`api.service`，我注入了`HttpClient`、`NzNotificationService`、`router`三个服务。\n在测试`api.service`时，你测试的是`router`服务的`navigate`方法有没有被调用，而且输入什么参数。这时，你要使用`jasmine`的`spy`监视对`router`下的`navigate`方法。而不是，检查浏览器地址栏是否有发生变化。\n难道我们就不要检查浏览器地址栏的变化吗？其实，还是要的。不过，这应该是交给`router`服务本身的测试来做。这才是模块化的思想，各模块能独立加载，有自身的单元测试。  \n\n然后，是对登录页组件的测试。对于`login.spec.ts`这个测试文件的内容，主要还是记录下`jasmine.createSpyObj`这个方法。我用这个方法创建了一个`AuthService`的`spy`。这个`spy`是监视点击登录按钮时，触发的组件内的`submit`函数。`submit`执行时会调用`AuthService`的`login`方法。此时，我们不需要用`httpMock`方式来模拟网络请求数据了，可以直接调用`AuthService.login`(这个服务和方法现在是`jasmine`创建的`spy`)下的`returnValue`来立刻返回结果，这样我们就可以直接测试`authService.login.subscribe`回调函数内的代码。  \n那为什么可以不用`httpMock`模拟网络请求呢？这就是上面提到的各自独立加载和有测试单元了。我们已经对`AuthService`这个服务写过单元测试了，保证了他的功能正常。然后，到我们的对组件测试时，我们就没必要再重复这个模拟过程了。\n\n\n","slug":"angular-testing","published":1,"updated":"2018-05-15T09:36:35.639Z","_id":"cjh7he6ot00002gu2xcc5wy6v","comments":1,"layout":"post","photos":[],"link":"","content":"<p>这是一篇流水账式记录angular测试时遇到的问题和想法。</p>\n<p>在这个项目内的<code>api.service</code>，我注入了<code>HttpClient</code>、<code>NzNotificationService</code>、<code>router</code>三个服务。<br>在测试<code>api.service</code>时，你测试的是<code>router</code>服务的<code>navigate</code>方法有没有被调用，而且输入什么参数。这时，你要使用<code>jasmine</code>的<code>spy</code>监视对<code>router</code>下的<code>navigate</code>方法。而不是，检查浏览器地址栏是否有发生变化。<br>难道我们就不要检查浏览器地址栏的变化吗？其实，还是要的。不过，这应该是交给<code>router</code>服务本身的测试来做。这才是模块化的思想，各模块能独立加载，有自身的单元测试。  </p>\n<p>然后，是对登录页组件的测试。对于<code>login.spec.ts</code>这个测试文件的内容，主要还是记录下<code>jasmine.createSpyObj</code>这个方法。我用这个方法创建了一个<code>AuthService</code>的<code>spy</code>。这个<code>spy</code>是监视点击登录按钮时，触发的组件内的<code>submit</code>函数。<code>submit</code>执行时会调用<code>AuthService</code>的<code>login</code>方法。此时，我们不需要用<code>httpMock</code>方式来模拟网络请求数据了，可以直接调用<code>AuthService.login</code>(这个服务和方法现在是<code>jasmine</code>创建的<code>spy</code>)下的<code>returnValue</code>来立刻返回结果，这样我们就可以直接测试<code>authService.login.subscribe</code>回调函数内的代码。<br>那为什么可以不用<code>httpMock</code>模拟网络请求呢？这就是上面提到的各自独立加载和有测试单元了。我们已经对<code>AuthService</code>这个服务写过单元测试了，保证了他的功能正常。然后，到我们的对组件测试时，我们就没必要再重复这个模拟过程了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这是一篇流水账式记录angular测试时遇到的问题和想法。</p>\n<p>在这个项目内的<code>api.service</code>，我注入了<code>HttpClient</code>、<code>NzNotificationService</code>、<code>router</code>三个服务。<br>在测试<code>api.service</code>时，你测试的是<code>router</code>服务的<code>navigate</code>方法有没有被调用，而且输入什么参数。这时，你要使用<code>jasmine</code>的<code>spy</code>监视对<code>router</code>下的<code>navigate</code>方法。而不是，检查浏览器地址栏是否有发生变化。<br>难道我们就不要检查浏览器地址栏的变化吗？其实，还是要的。不过，这应该是交给<code>router</code>服务本身的测试来做。这才是模块化的思想，各模块能独立加载，有自身的单元测试。  </p>\n<p>然后，是对登录页组件的测试。对于<code>login.spec.ts</code>这个测试文件的内容，主要还是记录下<code>jasmine.createSpyObj</code>这个方法。我用这个方法创建了一个<code>AuthService</code>的<code>spy</code>。这个<code>spy</code>是监视点击登录按钮时，触发的组件内的<code>submit</code>函数。<code>submit</code>执行时会调用<code>AuthService</code>的<code>login</code>方法。此时，我们不需要用<code>httpMock</code>方式来模拟网络请求数据了，可以直接调用<code>AuthService.login</code>(这个服务和方法现在是<code>jasmine</code>创建的<code>spy</code>)下的<code>returnValue</code>来立刻返回结果，这样我们就可以直接测试<code>authService.login.subscribe</code>回调函数内的代码。<br>那为什么可以不用<code>httpMock</code>模拟网络请求呢？这就是上面提到的各自独立加载和有测试单元了。我们已经对<code>AuthService</code>这个服务写过单元测试了，保证了他的功能正常。然后，到我们的对组件测试时，我们就没必要再重复这个模拟过程了。</p>\n"},{"title":"开发angular上的formControl组件","date":"2018-05-15T12:02:59.000Z","_content":"\n\n一个简单的密码显示隐藏组件，是对ant desigin of angular的nz-input组件的二次封装。\n\n文件源代码：https://github.com/BoxSystem/StoreBox-ng2/blob/master/src/app/components/password-eye/index.ts\n\n看文件的提交历史。其实，一开始是没考虑formControl的支持的。不使用formControl的情况，只要使用EventEmitter触发事件进行组件间交互就好。\n当你需要在页面组件使用FormBuilder时，你就需要在页面元素上绑定formControlName属性。\n但是，当你需要将html元素二次封装成组件时，你的组件必须`implements``ControlValueAccessor`这个接口。并且，实现接口下面的三个方法`writeValue` `registerOnChange` `registerOnTouched`。实现了这个三方法后，上面EventEmitter触发的交互事件已经不需要了。\n\n","source":"_posts/angular-component-formcontrol.md","raw":"---\ntitle: 开发angular上的formControl组件\ntags:\n  - angular\n  - formControl\n  - component\ncategories:\n  - angular\ndate: 2018-05-15 12:02:59\n---\n\n\n一个简单的密码显示隐藏组件，是对ant desigin of angular的nz-input组件的二次封装。\n\n文件源代码：https://github.com/BoxSystem/StoreBox-ng2/blob/master/src/app/components/password-eye/index.ts\n\n看文件的提交历史。其实，一开始是没考虑formControl的支持的。不使用formControl的情况，只要使用EventEmitter触发事件进行组件间交互就好。\n当你需要在页面组件使用FormBuilder时，你就需要在页面元素上绑定formControlName属性。\n但是，当你需要将html元素二次封装成组件时，你的组件必须`implements``ControlValueAccessor`这个接口。并且，实现接口下面的三个方法`writeValue` `registerOnChange` `registerOnTouched`。实现了这个三方法后，上面EventEmitter触发的交互事件已经不需要了。\n\n","slug":"angular-component-formcontrol","published":1,"updated":"2018-05-15T09:36:58.489Z","_id":"cjh7he6oz00012gu2iq1f35z8","comments":1,"layout":"post","photos":[],"link":"","content":"<p>一个简单的密码显示隐藏组件，是对ant desigin of angular的nz-input组件的二次封装。</p>\n<p>文件源代码：<a href=\"https://github.com/BoxSystem/StoreBox-ng2/blob/master/src/app/components/password-eye/index.ts\" target=\"_blank\" rel=\"noopener\">https://github.com/BoxSystem/StoreBox-ng2/blob/master/src/app/components/password-eye/index.ts</a></p>\n<p>看文件的提交历史。其实，一开始是没考虑formControl的支持的。不使用formControl的情况，只要使用EventEmitter触发事件进行组件间交互就好。<br>当你需要在页面组件使用FormBuilder时，你就需要在页面元素上绑定formControlName属性。<br>但是，当你需要将html元素二次封装成组件时，你的组件必须<code>implements`</code>ControlValueAccessor<code>这个接口。并且，实现接口下面的三个方法</code>writeValue<code></code>registerOnChange<code></code>registerOnTouched`。实现了这个三方法后，上面EventEmitter触发的交互事件已经不需要了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>一个简单的密码显示隐藏组件，是对ant desigin of angular的nz-input组件的二次封装。</p>\n<p>文件源代码：<a href=\"https://github.com/BoxSystem/StoreBox-ng2/blob/master/src/app/components/password-eye/index.ts\" target=\"_blank\" rel=\"noopener\">https://github.com/BoxSystem/StoreBox-ng2/blob/master/src/app/components/password-eye/index.ts</a></p>\n<p>看文件的提交历史。其实，一开始是没考虑formControl的支持的。不使用formControl的情况，只要使用EventEmitter触发事件进行组件间交互就好。<br>当你需要在页面组件使用FormBuilder时，你就需要在页面元素上绑定formControlName属性。<br>但是，当你需要将html元素二次封装成组件时，你的组件必须<code>implements`</code>ControlValueAccessor<code>这个接口。并且，实现接口下面的三个方法</code>writeValue<code></code>registerOnChange<code></code>registerOnTouched`。实现了这个三方法后，上面EventEmitter触发的交互事件已经不需要了。</p>\n"},{"title":"应用在openwrt固件上的angular项目","date":"2018-01-11T14:00:00.000Z","_content":"\n项目地址：https://github.com/yanqing6628780/angular2_ubus_openwrt\n\n该项目是在公司的`pandorabox`固件的`ubus`接口下，使用`angular`进行开发尝试。\n所以，要运行该项目：\n- 你需要一个路由器\n- 该路由器需要刷入`pandorabox`或者`openwrt`固件\n- 固件内需要有以下`ubus`命令：\n    - session\n    - uci\n\n如果你路由器不是`192.168.1.1`的ip，你还需要修改`proxy.conf.json`文件。\n\n该项目是从angular的hero项目clone下来后直接修改的。只app内的文件，其他配置基本没有修改。\n用到的知识点如下：\n- 路由拆分\n- http拦截器\n- 路由守卫(鉴权)\n- 延迟加载(这个没看出效果)\n- 使用[ng-zorro-antd](https://ng.ant.design)\n- 组件二次封装(难点1)\n\n其实，按照hero项目的教程看下来，你基本能掌握大部分技能。但是，要真正学习到知识还是要用实际项目练手。就好像难点1那里，这里的封装需了解\n- 如何对数据进行双向绑定\n- 如何从组件输入后输出\n现在`angular`不像`angular1`的`Directive`可以直接使用`scope`进行双向绑定\n你还要使用各种装饰器`@Input` `@Output`还要使用`EventEmitter`进行事件触发。\n详细请看`password_eye`目录下.ts文件\n\n据说，这样做的目的是为了减少像`angular1`那样的全局`脏检查`，性能会更好。但是，开发就麻烦和复杂了。\n\n### 总结\nangular开发还是要配合`vscode`进行开发，不然`import`库的时候真的好麻烦\n还有现在引入的组件概念。其实，你把这个组件当成`angular1`的控制器，就比较容易理解。\n但是，`angular1`的`Directive`现在也是归到`@Component`的。你在`angular`里面使用`@Directive`是没法引入`template`和`templateUrl`这些参数的。所以，`angular`的`@Directive`又是另外一个概念了\n而且，`angular`现在也解决了`angular1`时的少问题。例如：双view。而且，`route`比以前强大，有守卫、延迟加载、还有延迟预加载。\n不过，`angular`有个比较麻烦的‘缺点’。例如：父组件的模板上有个`tilte`变量，这个变量是用在head标签内的title标签。如果，想要子组件内赋值，你只能使用`service`这种形式，然后这个变量要用Rxjx的`Observable`。子组件要注入这个`service`，父组件对其进行`订阅`。\n暂时，使用`angular`的感受就是这样了。如果项目能继续深入应该会有发现更多‘问题’，解决更多问题，这样对`angular`有更多和更深入的了解。\n","source":"_posts/angular-ubus-openwrt.md","raw":"---\ntitle: 应用在openwrt固件上的angular项目\ndate: 2018-01-11 14:00:00\ncategories:\n    - angular\ntags:\n- angular\n- openwrt\n- ubus\n---\n\n项目地址：https://github.com/yanqing6628780/angular2_ubus_openwrt\n\n该项目是在公司的`pandorabox`固件的`ubus`接口下，使用`angular`进行开发尝试。\n所以，要运行该项目：\n- 你需要一个路由器\n- 该路由器需要刷入`pandorabox`或者`openwrt`固件\n- 固件内需要有以下`ubus`命令：\n    - session\n    - uci\n\n如果你路由器不是`192.168.1.1`的ip，你还需要修改`proxy.conf.json`文件。\n\n该项目是从angular的hero项目clone下来后直接修改的。只app内的文件，其他配置基本没有修改。\n用到的知识点如下：\n- 路由拆分\n- http拦截器\n- 路由守卫(鉴权)\n- 延迟加载(这个没看出效果)\n- 使用[ng-zorro-antd](https://ng.ant.design)\n- 组件二次封装(难点1)\n\n其实，按照hero项目的教程看下来，你基本能掌握大部分技能。但是，要真正学习到知识还是要用实际项目练手。就好像难点1那里，这里的封装需了解\n- 如何对数据进行双向绑定\n- 如何从组件输入后输出\n现在`angular`不像`angular1`的`Directive`可以直接使用`scope`进行双向绑定\n你还要使用各种装饰器`@Input` `@Output`还要使用`EventEmitter`进行事件触发。\n详细请看`password_eye`目录下.ts文件\n\n据说，这样做的目的是为了减少像`angular1`那样的全局`脏检查`，性能会更好。但是，开发就麻烦和复杂了。\n\n### 总结\nangular开发还是要配合`vscode`进行开发，不然`import`库的时候真的好麻烦\n还有现在引入的组件概念。其实，你把这个组件当成`angular1`的控制器，就比较容易理解。\n但是，`angular1`的`Directive`现在也是归到`@Component`的。你在`angular`里面使用`@Directive`是没法引入`template`和`templateUrl`这些参数的。所以，`angular`的`@Directive`又是另外一个概念了\n而且，`angular`现在也解决了`angular1`时的少问题。例如：双view。而且，`route`比以前强大，有守卫、延迟加载、还有延迟预加载。\n不过，`angular`有个比较麻烦的‘缺点’。例如：父组件的模板上有个`tilte`变量，这个变量是用在head标签内的title标签。如果，想要子组件内赋值，你只能使用`service`这种形式，然后这个变量要用Rxjx的`Observable`。子组件要注入这个`service`，父组件对其进行`订阅`。\n暂时，使用`angular`的感受就是这样了。如果项目能继续深入应该会有发现更多‘问题’，解决更多问题，这样对`angular`有更多和更深入的了解。\n","slug":"angular-ubus-openwrt","published":1,"updated":"2018-05-15T09:36:41.926Z","_id":"cjh7he6qo00042gu2jkwo38hz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>项目地址：<a href=\"https://github.com/yanqing6628780/angular2_ubus_openwrt\" target=\"_blank\" rel=\"noopener\">https://github.com/yanqing6628780/angular2_ubus_openwrt</a></p>\n<p>该项目是在公司的<code>pandorabox</code>固件的<code>ubus</code>接口下，使用<code>angular</code>进行开发尝试。<br>所以，要运行该项目：</p>\n<ul>\n<li>你需要一个路由器</li>\n<li>该路由器需要刷入<code>pandorabox</code>或者<code>openwrt</code>固件</li>\n<li>固件内需要有以下<code>ubus</code>命令：<ul>\n<li>session</li>\n<li>uci</li>\n</ul>\n</li>\n</ul>\n<p>如果你路由器不是<code>192.168.1.1</code>的ip，你还需要修改<code>proxy.conf.json</code>文件。</p>\n<p>该项目是从angular的hero项目clone下来后直接修改的。只app内的文件，其他配置基本没有修改。<br>用到的知识点如下：</p>\n<ul>\n<li>路由拆分</li>\n<li>http拦截器</li>\n<li>路由守卫(鉴权)</li>\n<li>延迟加载(这个没看出效果)</li>\n<li>使用<a href=\"https://ng.ant.design\" target=\"_blank\" rel=\"noopener\">ng-zorro-antd</a></li>\n<li>组件二次封装(难点1)</li>\n</ul>\n<p>其实，按照hero项目的教程看下来，你基本能掌握大部分技能。但是，要真正学习到知识还是要用实际项目练手。就好像难点1那里，这里的封装需了解</p>\n<ul>\n<li>如何对数据进行双向绑定</li>\n<li>如何从组件输入后输出<br>现在<code>angular</code>不像<code>angular1</code>的<code>Directive</code>可以直接使用<code>scope</code>进行双向绑定<br>你还要使用各种装饰器<code>@Input</code> <code>@Output</code>还要使用<code>EventEmitter</code>进行事件触发。<br>详细请看<code>password_eye</code>目录下.ts文件</li>\n</ul>\n<p>据说，这样做的目的是为了减少像<code>angular1</code>那样的全局<code>脏检查</code>，性能会更好。但是，开发就麻烦和复杂了。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>angular开发还是要配合<code>vscode</code>进行开发，不然<code>import</code>库的时候真的好麻烦<br>还有现在引入的组件概念。其实，你把这个组件当成<code>angular1</code>的控制器，就比较容易理解。<br>但是，<code>angular1</code>的<code>Directive</code>现在也是归到<code>@Component</code>的。你在<code>angular</code>里面使用<code>@Directive</code>是没法引入<code>template</code>和<code>templateUrl</code>这些参数的。所以，<code>angular</code>的<code>@Directive</code>又是另外一个概念了<br>而且，<code>angular</code>现在也解决了<code>angular1</code>时的少问题。例如：双view。而且，<code>route</code>比以前强大，有守卫、延迟加载、还有延迟预加载。<br>不过，<code>angular</code>有个比较麻烦的‘缺点’。例如：父组件的模板上有个<code>tilte</code>变量，这个变量是用在head标签内的title标签。如果，想要子组件内赋值，你只能使用<code>service</code>这种形式，然后这个变量要用Rxjx的<code>Observable</code>。子组件要注入这个<code>service</code>，父组件对其进行<code>订阅</code>。<br>暂时，使用<code>angular</code>的感受就是这样了。如果项目能继续深入应该会有发现更多‘问题’，解决更多问题，这样对<code>angular</code>有更多和更深入的了解。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>项目地址：<a href=\"https://github.com/yanqing6628780/angular2_ubus_openwrt\" target=\"_blank\" rel=\"noopener\">https://github.com/yanqing6628780/angular2_ubus_openwrt</a></p>\n<p>该项目是在公司的<code>pandorabox</code>固件的<code>ubus</code>接口下，使用<code>angular</code>进行开发尝试。<br>所以，要运行该项目：</p>\n<ul>\n<li>你需要一个路由器</li>\n<li>该路由器需要刷入<code>pandorabox</code>或者<code>openwrt</code>固件</li>\n<li>固件内需要有以下<code>ubus</code>命令：<ul>\n<li>session</li>\n<li>uci</li>\n</ul>\n</li>\n</ul>\n<p>如果你路由器不是<code>192.168.1.1</code>的ip，你还需要修改<code>proxy.conf.json</code>文件。</p>\n<p>该项目是从angular的hero项目clone下来后直接修改的。只app内的文件，其他配置基本没有修改。<br>用到的知识点如下：</p>\n<ul>\n<li>路由拆分</li>\n<li>http拦截器</li>\n<li>路由守卫(鉴权)</li>\n<li>延迟加载(这个没看出效果)</li>\n<li>使用<a href=\"https://ng.ant.design\" target=\"_blank\" rel=\"noopener\">ng-zorro-antd</a></li>\n<li>组件二次封装(难点1)</li>\n</ul>\n<p>其实，按照hero项目的教程看下来，你基本能掌握大部分技能。但是，要真正学习到知识还是要用实际项目练手。就好像难点1那里，这里的封装需了解</p>\n<ul>\n<li>如何对数据进行双向绑定</li>\n<li>如何从组件输入后输出<br>现在<code>angular</code>不像<code>angular1</code>的<code>Directive</code>可以直接使用<code>scope</code>进行双向绑定<br>你还要使用各种装饰器<code>@Input</code> <code>@Output</code>还要使用<code>EventEmitter</code>进行事件触发。<br>详细请看<code>password_eye</code>目录下.ts文件</li>\n</ul>\n<p>据说，这样做的目的是为了减少像<code>angular1</code>那样的全局<code>脏检查</code>，性能会更好。但是，开发就麻烦和复杂了。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>angular开发还是要配合<code>vscode</code>进行开发，不然<code>import</code>库的时候真的好麻烦<br>还有现在引入的组件概念。其实，你把这个组件当成<code>angular1</code>的控制器，就比较容易理解。<br>但是，<code>angular1</code>的<code>Directive</code>现在也是归到<code>@Component</code>的。你在<code>angular</code>里面使用<code>@Directive</code>是没法引入<code>template</code>和<code>templateUrl</code>这些参数的。所以，<code>angular</code>的<code>@Directive</code>又是另外一个概念了<br>而且，<code>angular</code>现在也解决了<code>angular1</code>时的少问题。例如：双view。而且，<code>route</code>比以前强大，有守卫、延迟加载、还有延迟预加载。<br>不过，<code>angular</code>有个比较麻烦的‘缺点’。例如：父组件的模板上有个<code>tilte</code>变量，这个变量是用在head标签内的title标签。如果，想要子组件内赋值，你只能使用<code>service</code>这种形式，然后这个变量要用Rxjx的<code>Observable</code>。子组件要注入这个<code>service</code>，父组件对其进行<code>订阅</code>。<br>暂时，使用<code>angular</code>的感受就是这样了。如果项目能继续深入应该会有发现更多‘问题’，解决更多问题，这样对<code>angular</code>有更多和更深入的了解。</p>\n"},{"title":"docker 挂载目录造成程序无法找到文件","date":"2018-01-11T10:24:03.000Z","_content":"\n```\ndb:\n    image: mongo\n    volumes:\n        - ~/www/db:/data\n    container_name: db\n    restart: always\n\nwww:\n    build: .\n    ports:\n        - \"12333:8000\"\n    volumes:\n        - ~/www/logs:/www/logs\n        - ~/www/public:/www/public\n        - ~/www/config:/www/config\n    links:\n        - db\n    container_name: www_authbox\n    restart: always\n```\n\n以上是docker-compose配置。\n有问题是这里 `- ~/www/config:/www/config`\nconfig目录是用来放置程序配置文件的\n如果将config目录挂载后，`npm start`启动程序时，程序查找config目录下文件会提示找不到文件的错误。但是，文件其实已经在构建时拷贝到config目录下了。\n这是docker挂载的bug呢？还是写法有问题呢？暂时未找到原因\n\n解决方案如下：\n- 不要挂载config目录\n- 根据同事建议，迟延`npm start`。如使用sleep。或者在`\\bin\\www`增加`timeout`代码\n","source":"_posts/docker-mount.md","raw":"---\ntitle: docker 挂载目录造成程序无法找到文件\ndate: 2018-01-11 10:24:03\ncategories:\n    - 运维\ntags:\n- docker\n- docker-compose\n---\n\n```\ndb:\n    image: mongo\n    volumes:\n        - ~/www/db:/data\n    container_name: db\n    restart: always\n\nwww:\n    build: .\n    ports:\n        - \"12333:8000\"\n    volumes:\n        - ~/www/logs:/www/logs\n        - ~/www/public:/www/public\n        - ~/www/config:/www/config\n    links:\n        - db\n    container_name: www_authbox\n    restart: always\n```\n\n以上是docker-compose配置。\n有问题是这里 `- ~/www/config:/www/config`\nconfig目录是用来放置程序配置文件的\n如果将config目录挂载后，`npm start`启动程序时，程序查找config目录下文件会提示找不到文件的错误。但是，文件其实已经在构建时拷贝到config目录下了。\n这是docker挂载的bug呢？还是写法有问题呢？暂时未找到原因\n\n解决方案如下：\n- 不要挂载config目录\n- 根据同事建议，迟延`npm start`。如使用sleep。或者在`\\bin\\www`增加`timeout`代码\n","slug":"docker-mount","published":1,"updated":"2018-05-15T09:34:04.464Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjh7he6qv00052gu2dtcez11z","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db:</span><br><span class=\"line\">    image: mongo</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">        - ~/www/db:/data</span><br><span class=\"line\">    container_name: db</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\"></span><br><span class=\"line\">www:</span><br><span class=\"line\">    build: .</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">        - &quot;12333:8000&quot;</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">        - ~/www/logs:/www/logs</span><br><span class=\"line\">        - ~/www/public:/www/public</span><br><span class=\"line\">        - ~/www/config:/www/config</span><br><span class=\"line\">    links:</span><br><span class=\"line\">        - db</span><br><span class=\"line\">    container_name: www_authbox</span><br><span class=\"line\">    restart: always</span><br></pre></td></tr></table></figure>\n<p>以上是docker-compose配置。<br>有问题是这里 <code>- ~/www/config:/www/config</code><br>config目录是用来放置程序配置文件的<br>如果将config目录挂载后，<code>npm start</code>启动程序时，程序查找config目录下文件会提示找不到文件的错误。但是，文件其实已经在构建时拷贝到config目录下了。<br>这是docker挂载的bug呢？还是写法有问题呢？暂时未找到原因</p>\n<p>解决方案如下：</p>\n<ul>\n<li>不要挂载config目录</li>\n<li>根据同事建议，迟延<code>npm start</code>。如使用sleep。或者在<code>\\bin\\www</code>增加<code>timeout</code>代码</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db:</span><br><span class=\"line\">    image: mongo</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">        - ~/www/db:/data</span><br><span class=\"line\">    container_name: db</span><br><span class=\"line\">    restart: always</span><br><span class=\"line\"></span><br><span class=\"line\">www:</span><br><span class=\"line\">    build: .</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">        - &quot;12333:8000&quot;</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">        - ~/www/logs:/www/logs</span><br><span class=\"line\">        - ~/www/public:/www/public</span><br><span class=\"line\">        - ~/www/config:/www/config</span><br><span class=\"line\">    links:</span><br><span class=\"line\">        - db</span><br><span class=\"line\">    container_name: www_authbox</span><br><span class=\"line\">    restart: always</span><br></pre></td></tr></table></figure>\n<p>以上是docker-compose配置。<br>有问题是这里 <code>- ~/www/config:/www/config</code><br>config目录是用来放置程序配置文件的<br>如果将config目录挂载后，<code>npm start</code>启动程序时，程序查找config目录下文件会提示找不到文件的错误。但是，文件其实已经在构建时拷贝到config目录下了。<br>这是docker挂载的bug呢？还是写法有问题呢？暂时未找到原因</p>\n<p>解决方案如下：</p>\n<ul>\n<li>不要挂载config目录</li>\n<li>根据同事建议，迟延<code>npm start</code>。如使用sleep。或者在<code>\\bin\\www</code>增加<code>timeout</code>代码</li>\n</ul>\n"},{"title":"karma配置参数笔记(2)","date":"2017-02-21T16:39:11.000Z","description":"本文是关于karam配置参数笔记.涉及如下参数:files preprocessors reporters","_content":"\n\n```\nmodule.exports = function(config) {\n    var files = [];\n    files.push('newifi/@(jquery*|newifi).js');\n    files.push('index.html');\n    files.push('../../test/*.coffee');\n    files.push('../../test/*.js');\n    var otherFiles = [\n        'newifi/**/!(jquery*|newifi|angular*|bootstrap|echarts*).js',\n        'newifi/**/*.css',\n        'newifi/**/*.json'\n    ];\n    otherFiles.forEach((file) => {\n        files.push({\n            pattern: file,\n            served: true,\n            included: false\n        });\n    });\n    var preprocessors = {\n        '**/*.html': ['html2js'],\n        '../../**/*.coffee': ['coffee']\n    };\n    preprocessors[otherFiles[0]] = ['coverage'];\n    config.set({\n        // base path that will be used to resolve all patterns (eg. files, exclude)\n        basePath: 'web/htdocs/',\n\n\n        // frameworks to use\n        // available frameworks: https://npmjs.org/browse/keyword/karma-adapter\n        frameworks: ['jasmine-jquery', 'jasmine', 'jasmine-matchers'],\n\n\n        // list of files / patterns to load in the browser\n        files: files,\n\n        // list of files to exclude\n        exclude: [],\n\n\n        // preprocess matching files before serving them to the browser\n        // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor\n        preprocessors: preprocessors,\n        proxies: {\n            '/newifi': '/base/newifi'\n        },\n\n        // test results reporter to use\n        // possible values: 'dots', 'progress'\n        // available reporters: https://npmjs.org/browse/keyword/karma-reporter\n        reporters: ['progress', 'kjhtml', 'coverage'],\n\n        coverageReporter: {\n            type: 'html',\n            dir: '../../coverage/'\n        },\n\n        // web server port\n        port: 9876,\n\n\n        // enable / disable colors in the output (reporters and logs)\n        colors: true,\n\n\n        // level of logging\n        // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG\n        logLevel: config.LOG_INFO,\n\n\n        // enable / disable watching file and executing tests whenever any file changes\n        autoWatch: true,\n\n\n        // start these browsers\n        // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher\n        browsers: ['PhantomJS'],\n\n\n        // Continuous Integration mode\n        // if true, Karma captures browsers, runs the tests and exits\n        singleRun: false,\n\n        // Concurrency level\n        // how many browser should be started simultaneous\n        concurrency: Infinity\n    });\n};\n```\n\n这是改进后的配置文件。  \n上一篇里面用`glob`获取所有匹配文件，然后一个个加文件的做法其实是多余的。\n经过试验，其实`karma`的文件匹配方式是支持`glob`那套的。\n<!--more-->\n\n然后，新配置内添加`kjhtml`插件和`coverage`插件。  \n`kjhtml`插件的作用是将`karma`服务器的debug页变成测试结果页。而且，在debug页点击其中一个测试结果，该测试都会重新执行一遍。不过，可惜的是，修改测试文件后不会自动刷新。  \n`coverage`插件是覆盖测试报告。  \n上面配置文件里面的这句:  \n```\npreprocessors[otherFiles[0]] = ['coverage'];\n```\n表示那些被测试的文件需要代码覆盖测试报告。\n","source":"_posts/karma-config-note-2.md","raw":"---\ntitle: karma配置参数笔记(2)\ndate: 2017-02-21 16:39:11\ncategories:\n    - 测试\ntags:\n- karma\n- 测试框架\ndescription: 本文是关于karam配置参数笔记.涉及如下参数:files preprocessors reporters\n---\n\n\n```\nmodule.exports = function(config) {\n    var files = [];\n    files.push('newifi/@(jquery*|newifi).js');\n    files.push('index.html');\n    files.push('../../test/*.coffee');\n    files.push('../../test/*.js');\n    var otherFiles = [\n        'newifi/**/!(jquery*|newifi|angular*|bootstrap|echarts*).js',\n        'newifi/**/*.css',\n        'newifi/**/*.json'\n    ];\n    otherFiles.forEach((file) => {\n        files.push({\n            pattern: file,\n            served: true,\n            included: false\n        });\n    });\n    var preprocessors = {\n        '**/*.html': ['html2js'],\n        '../../**/*.coffee': ['coffee']\n    };\n    preprocessors[otherFiles[0]] = ['coverage'];\n    config.set({\n        // base path that will be used to resolve all patterns (eg. files, exclude)\n        basePath: 'web/htdocs/',\n\n\n        // frameworks to use\n        // available frameworks: https://npmjs.org/browse/keyword/karma-adapter\n        frameworks: ['jasmine-jquery', 'jasmine', 'jasmine-matchers'],\n\n\n        // list of files / patterns to load in the browser\n        files: files,\n\n        // list of files to exclude\n        exclude: [],\n\n\n        // preprocess matching files before serving them to the browser\n        // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor\n        preprocessors: preprocessors,\n        proxies: {\n            '/newifi': '/base/newifi'\n        },\n\n        // test results reporter to use\n        // possible values: 'dots', 'progress'\n        // available reporters: https://npmjs.org/browse/keyword/karma-reporter\n        reporters: ['progress', 'kjhtml', 'coverage'],\n\n        coverageReporter: {\n            type: 'html',\n            dir: '../../coverage/'\n        },\n\n        // web server port\n        port: 9876,\n\n\n        // enable / disable colors in the output (reporters and logs)\n        colors: true,\n\n\n        // level of logging\n        // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG\n        logLevel: config.LOG_INFO,\n\n\n        // enable / disable watching file and executing tests whenever any file changes\n        autoWatch: true,\n\n\n        // start these browsers\n        // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher\n        browsers: ['PhantomJS'],\n\n\n        // Continuous Integration mode\n        // if true, Karma captures browsers, runs the tests and exits\n        singleRun: false,\n\n        // Concurrency level\n        // how many browser should be started simultaneous\n        concurrency: Infinity\n    });\n};\n```\n\n这是改进后的配置文件。  \n上一篇里面用`glob`获取所有匹配文件，然后一个个加文件的做法其实是多余的。\n经过试验，其实`karma`的文件匹配方式是支持`glob`那套的。\n<!--more-->\n\n然后，新配置内添加`kjhtml`插件和`coverage`插件。  \n`kjhtml`插件的作用是将`karma`服务器的debug页变成测试结果页。而且，在debug页点击其中一个测试结果，该测试都会重新执行一遍。不过，可惜的是，修改测试文件后不会自动刷新。  \n`coverage`插件是覆盖测试报告。  \n上面配置文件里面的这句:  \n```\npreprocessors[otherFiles[0]] = ['coverage'];\n```\n表示那些被测试的文件需要代码覆盖测试报告。\n","slug":"karma-config-note-2","published":1,"updated":"2018-05-15T09:34:08.460Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjh7he6qz00062gu2jl876s7f","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = function(config) &#123;</span><br><span class=\"line\">    var files = [];</span><br><span class=\"line\">    files.push(&apos;newifi/@(jquery*|newifi).js&apos;);</span><br><span class=\"line\">    files.push(&apos;index.html&apos;);</span><br><span class=\"line\">    files.push(&apos;../../test/*.coffee&apos;);</span><br><span class=\"line\">    files.push(&apos;../../test/*.js&apos;);</span><br><span class=\"line\">    var otherFiles = [</span><br><span class=\"line\">        &apos;newifi/**/!(jquery*|newifi|angular*|bootstrap|echarts*).js&apos;,</span><br><span class=\"line\">        &apos;newifi/**/*.css&apos;,</span><br><span class=\"line\">        &apos;newifi/**/*.json&apos;</span><br><span class=\"line\">    ];</span><br><span class=\"line\">    otherFiles.forEach((file) =&gt; &#123;</span><br><span class=\"line\">        files.push(&#123;</span><br><span class=\"line\">            pattern: file,</span><br><span class=\"line\">            served: true,</span><br><span class=\"line\">            included: false</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    var preprocessors = &#123;</span><br><span class=\"line\">        &apos;**/*.html&apos;: [&apos;html2js&apos;],</span><br><span class=\"line\">        &apos;../../**/*.coffee&apos;: [&apos;coffee&apos;]</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    preprocessors[otherFiles[0]] = [&apos;coverage&apos;];</span><br><span class=\"line\">    config.set(&#123;</span><br><span class=\"line\">        // base path that will be used to resolve all patterns (eg. files, exclude)</span><br><span class=\"line\">        basePath: &apos;web/htdocs/&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // frameworks to use</span><br><span class=\"line\">        // available frameworks: https://npmjs.org/browse/keyword/karma-adapter</span><br><span class=\"line\">        frameworks: [&apos;jasmine-jquery&apos;, &apos;jasmine&apos;, &apos;jasmine-matchers&apos;],</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // list of files / patterns to load in the browser</span><br><span class=\"line\">        files: files,</span><br><span class=\"line\"></span><br><span class=\"line\">        // list of files to exclude</span><br><span class=\"line\">        exclude: [],</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // preprocess matching files before serving them to the browser</span><br><span class=\"line\">        // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor</span><br><span class=\"line\">        preprocessors: preprocessors,</span><br><span class=\"line\">        proxies: &#123;</span><br><span class=\"line\">            &apos;/newifi&apos;: &apos;/base/newifi&apos;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        // test results reporter to use</span><br><span class=\"line\">        // possible values: &apos;dots&apos;, &apos;progress&apos;</span><br><span class=\"line\">        // available reporters: https://npmjs.org/browse/keyword/karma-reporter</span><br><span class=\"line\">        reporters: [&apos;progress&apos;, &apos;kjhtml&apos;, &apos;coverage&apos;],</span><br><span class=\"line\"></span><br><span class=\"line\">        coverageReporter: &#123;</span><br><span class=\"line\">            type: &apos;html&apos;,</span><br><span class=\"line\">            dir: &apos;../../coverage/&apos;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        // web server port</span><br><span class=\"line\">        port: 9876,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // enable / disable colors in the output (reporters and logs)</span><br><span class=\"line\">        colors: true,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // level of logging</span><br><span class=\"line\">        // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG</span><br><span class=\"line\">        logLevel: config.LOG_INFO,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // enable / disable watching file and executing tests whenever any file changes</span><br><span class=\"line\">        autoWatch: true,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // start these browsers</span><br><span class=\"line\">        // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher</span><br><span class=\"line\">        browsers: [&apos;PhantomJS&apos;],</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // Continuous Integration mode</span><br><span class=\"line\">        // if true, Karma captures browsers, runs the tests and exits</span><br><span class=\"line\">        singleRun: false,</span><br><span class=\"line\"></span><br><span class=\"line\">        // Concurrency level</span><br><span class=\"line\">        // how many browser should be started simultaneous</span><br><span class=\"line\">        concurrency: Infinity</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这是改进后的配置文件。<br>上一篇里面用<code>glob</code>获取所有匹配文件，然后一个个加文件的做法其实是多余的。<br>经过试验，其实<code>karma</code>的文件匹配方式是支持<code>glob</code>那套的。<br><a id=\"more\"></a></p>\n<p>然后，新配置内添加<code>kjhtml</code>插件和<code>coverage</code>插件。<br><code>kjhtml</code>插件的作用是将<code>karma</code>服务器的debug页变成测试结果页。而且，在debug页点击其中一个测试结果，该测试都会重新执行一遍。不过，可惜的是，修改测试文件后不会自动刷新。<br><code>coverage</code>插件是覆盖测试报告。<br>上面配置文件里面的这句:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">preprocessors[otherFiles[0]] = [&apos;coverage&apos;];</span><br></pre></td></tr></table></figure></p>\n<p>表示那些被测试的文件需要代码覆盖测试报告。</p>\n","site":{"data":{}},"excerpt":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = function(config) &#123;</span><br><span class=\"line\">    var files = [];</span><br><span class=\"line\">    files.push(&apos;newifi/@(jquery*|newifi).js&apos;);</span><br><span class=\"line\">    files.push(&apos;index.html&apos;);</span><br><span class=\"line\">    files.push(&apos;../../test/*.coffee&apos;);</span><br><span class=\"line\">    files.push(&apos;../../test/*.js&apos;);</span><br><span class=\"line\">    var otherFiles = [</span><br><span class=\"line\">        &apos;newifi/**/!(jquery*|newifi|angular*|bootstrap|echarts*).js&apos;,</span><br><span class=\"line\">        &apos;newifi/**/*.css&apos;,</span><br><span class=\"line\">        &apos;newifi/**/*.json&apos;</span><br><span class=\"line\">    ];</span><br><span class=\"line\">    otherFiles.forEach((file) =&gt; &#123;</span><br><span class=\"line\">        files.push(&#123;</span><br><span class=\"line\">            pattern: file,</span><br><span class=\"line\">            served: true,</span><br><span class=\"line\">            included: false</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    var preprocessors = &#123;</span><br><span class=\"line\">        &apos;**/*.html&apos;: [&apos;html2js&apos;],</span><br><span class=\"line\">        &apos;../../**/*.coffee&apos;: [&apos;coffee&apos;]</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    preprocessors[otherFiles[0]] = [&apos;coverage&apos;];</span><br><span class=\"line\">    config.set(&#123;</span><br><span class=\"line\">        // base path that will be used to resolve all patterns (eg. files, exclude)</span><br><span class=\"line\">        basePath: &apos;web/htdocs/&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // frameworks to use</span><br><span class=\"line\">        // available frameworks: https://npmjs.org/browse/keyword/karma-adapter</span><br><span class=\"line\">        frameworks: [&apos;jasmine-jquery&apos;, &apos;jasmine&apos;, &apos;jasmine-matchers&apos;],</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // list of files / patterns to load in the browser</span><br><span class=\"line\">        files: files,</span><br><span class=\"line\"></span><br><span class=\"line\">        // list of files to exclude</span><br><span class=\"line\">        exclude: [],</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // preprocess matching files before serving them to the browser</span><br><span class=\"line\">        // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor</span><br><span class=\"line\">        preprocessors: preprocessors,</span><br><span class=\"line\">        proxies: &#123;</span><br><span class=\"line\">            &apos;/newifi&apos;: &apos;/base/newifi&apos;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        // test results reporter to use</span><br><span class=\"line\">        // possible values: &apos;dots&apos;, &apos;progress&apos;</span><br><span class=\"line\">        // available reporters: https://npmjs.org/browse/keyword/karma-reporter</span><br><span class=\"line\">        reporters: [&apos;progress&apos;, &apos;kjhtml&apos;, &apos;coverage&apos;],</span><br><span class=\"line\"></span><br><span class=\"line\">        coverageReporter: &#123;</span><br><span class=\"line\">            type: &apos;html&apos;,</span><br><span class=\"line\">            dir: &apos;../../coverage/&apos;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        // web server port</span><br><span class=\"line\">        port: 9876,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // enable / disable colors in the output (reporters and logs)</span><br><span class=\"line\">        colors: true,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // level of logging</span><br><span class=\"line\">        // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG</span><br><span class=\"line\">        logLevel: config.LOG_INFO,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // enable / disable watching file and executing tests whenever any file changes</span><br><span class=\"line\">        autoWatch: true,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // start these browsers</span><br><span class=\"line\">        // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher</span><br><span class=\"line\">        browsers: [&apos;PhantomJS&apos;],</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // Continuous Integration mode</span><br><span class=\"line\">        // if true, Karma captures browsers, runs the tests and exits</span><br><span class=\"line\">        singleRun: false,</span><br><span class=\"line\"></span><br><span class=\"line\">        // Concurrency level</span><br><span class=\"line\">        // how many browser should be started simultaneous</span><br><span class=\"line\">        concurrency: Infinity</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这是改进后的配置文件。<br>上一篇里面用<code>glob</code>获取所有匹配文件，然后一个个加文件的做法其实是多余的。<br>经过试验，其实<code>karma</code>的文件匹配方式是支持<code>glob</code>那套的。<br>","more":"</p>\n<p>然后，新配置内添加<code>kjhtml</code>插件和<code>coverage</code>插件。<br><code>kjhtml</code>插件的作用是将<code>karma</code>服务器的debug页变成测试结果页。而且，在debug页点击其中一个测试结果，该测试都会重新执行一遍。不过，可惜的是，修改测试文件后不会自动刷新。<br><code>coverage</code>插件是覆盖测试报告。<br>上面配置文件里面的这句:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">preprocessors[otherFiles[0]] = [&apos;coverage&apos;];</span><br></pre></td></tr></table></figure></p>\n<p>表示那些被测试的文件需要代码覆盖测试报告。</p>"},{"title":"karma配置参数笔记","date":"2017-02-16T16:04:10.000Z","description":"本文是关于karam配置参数笔记.涉及如下参数:basePath files proxies","_content":"\n```\nmodule.exports = function(config) {\n    var globSync = require(\"glob\").sync;\n    var files = globSync('newifi/@(jquery*|newifi).js', { cwd: 'web/htdocs' });\n    var otherJsFiles = globSync('newifi/**/!(jquery*|newifi|angular*|bootstrap|echarts*).{js,json}', { cwd: 'web/htdocs' });\n    var cssFiles = globSync('newifi/**/*.css', { cwd: 'web/htdocs' });\n    files.push('index.html');\n    files.push('../../test/*.coffee');\n    files.push('../../test/*.js');\n    otherJsFiles.forEach(function(file){\n        files.push({\n            pattern: file,\n            served: true,\n            included: false\n        });\n    });\n    cssFiles.forEach(function(file){\n        files.push({\n            pattern: file,\n            served: true,\n            included: false\n        });\n    });\n    config.set({\n        // base path that will be used to resolve all patterns (eg. files, exclude)\n        basePath: 'web/htdocs/',\n\n\n        // frameworks to use\n        // available frameworks: https://npmjs.org/browse/keyword/karma-adapter\n        frameworks: ['jasmine-jquery', 'jasmine', 'jasmine-matchers'],\n\n\n        // list of files / patterns to load in the browser\n        files: files,\n\n        // list of files to exclude\n        exclude: [],\n\n\n        // preprocess matching files before serving them to the browser\n        // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor\n        preprocessors: {\n            '**/*.html': ['html2js'],\n            '../../**/*.coffee': ['coffee', 'coverage']\n        },\n        proxies: {\n            '/newifi': '/base/newifi'\n        },\n\n        // test results reporter to use\n        // possible values: 'dots', 'progress'\n        // available reporters: https://npmjs.org/browse/keyword/karma-reporter\n        reporters: ['progress'],\n\n\n        // web server port\n        port: 9876,\n\n\n        // enable / disable colors in the output (reporters and logs)\n        colors: true,\n\n\n        // level of logging\n        // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG\n        logLevel: config.LOG_INFO,\n\n\n        // enable / disable watching file and executing tests whenever any file changes\n        autoWatch: true,\n\n\n        // start these browsers\n        // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher\n        browsers: ['PhantomJS'],\n\n\n        // Continuous Integration mode\n        // if true, Karma captures browsers, runs the tests and exits\n        singleRun: false,\n\n        // Concurrency level\n        // how many browser should be started simultaneous\n        concurrency: Infinity\n    });\n};\n```\n上面是我的配置文件  \n<!--more-->\n首先，说明下basePath参数。这个参数设置了`web/htdocs/`，这个作用是在`files`和`exclude`两个参数里面不用再写这部分路径的匹配了。  \n但是，我这个项目的`test`目录在`web/htdocs/`外,所以还要补上`../../`。否则会匹配不上。\n\n然后，我们再看看`files`参数下面这三个参数`pattern`、`served`和`included`这三个参数.  \n`pattern`是要匹配的文件和匹配模式  \n`served`用于该文件是否由karma webserver提供  \n`included`浏览器是否需要通过`<script>`标签引入该文件  \n\n为什么我要将部分文件设置成`included:false`手动加载呢？  \n这是因为部分js文件加载是由`newifi.js`，通过ajax加载进去的。如果，直接`included`进karma webserver就会报错（找不到函数或者变量没定义）。  \n但是，这样还是不能正常加载这些js文件的。在执行`newifi.js`时，ajax加载这部分js文件会提示404.\n这是因为karma将加载后的文件移到`http:\\\\localhost:[port]\\base`下了。所以，你还要设置`proxies`参数.将ajax加载`/newifi`下的js文件指向`/base/newifi`\n","source":"_posts/karma-config-note.md","raw":"---\ntitle: karma配置参数笔记\ndate: 2017-02-16 16:04:10\ncategories:\n    - 测试\ntags:\n- karma\n- 测试框架\ndescription: 本文是关于karam配置参数笔记.涉及如下参数:basePath files proxies\n---\n\n```\nmodule.exports = function(config) {\n    var globSync = require(\"glob\").sync;\n    var files = globSync('newifi/@(jquery*|newifi).js', { cwd: 'web/htdocs' });\n    var otherJsFiles = globSync('newifi/**/!(jquery*|newifi|angular*|bootstrap|echarts*).{js,json}', { cwd: 'web/htdocs' });\n    var cssFiles = globSync('newifi/**/*.css', { cwd: 'web/htdocs' });\n    files.push('index.html');\n    files.push('../../test/*.coffee');\n    files.push('../../test/*.js');\n    otherJsFiles.forEach(function(file){\n        files.push({\n            pattern: file,\n            served: true,\n            included: false\n        });\n    });\n    cssFiles.forEach(function(file){\n        files.push({\n            pattern: file,\n            served: true,\n            included: false\n        });\n    });\n    config.set({\n        // base path that will be used to resolve all patterns (eg. files, exclude)\n        basePath: 'web/htdocs/',\n\n\n        // frameworks to use\n        // available frameworks: https://npmjs.org/browse/keyword/karma-adapter\n        frameworks: ['jasmine-jquery', 'jasmine', 'jasmine-matchers'],\n\n\n        // list of files / patterns to load in the browser\n        files: files,\n\n        // list of files to exclude\n        exclude: [],\n\n\n        // preprocess matching files before serving them to the browser\n        // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor\n        preprocessors: {\n            '**/*.html': ['html2js'],\n            '../../**/*.coffee': ['coffee', 'coverage']\n        },\n        proxies: {\n            '/newifi': '/base/newifi'\n        },\n\n        // test results reporter to use\n        // possible values: 'dots', 'progress'\n        // available reporters: https://npmjs.org/browse/keyword/karma-reporter\n        reporters: ['progress'],\n\n\n        // web server port\n        port: 9876,\n\n\n        // enable / disable colors in the output (reporters and logs)\n        colors: true,\n\n\n        // level of logging\n        // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG\n        logLevel: config.LOG_INFO,\n\n\n        // enable / disable watching file and executing tests whenever any file changes\n        autoWatch: true,\n\n\n        // start these browsers\n        // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher\n        browsers: ['PhantomJS'],\n\n\n        // Continuous Integration mode\n        // if true, Karma captures browsers, runs the tests and exits\n        singleRun: false,\n\n        // Concurrency level\n        // how many browser should be started simultaneous\n        concurrency: Infinity\n    });\n};\n```\n上面是我的配置文件  \n<!--more-->\n首先，说明下basePath参数。这个参数设置了`web/htdocs/`，这个作用是在`files`和`exclude`两个参数里面不用再写这部分路径的匹配了。  \n但是，我这个项目的`test`目录在`web/htdocs/`外,所以还要补上`../../`。否则会匹配不上。\n\n然后，我们再看看`files`参数下面这三个参数`pattern`、`served`和`included`这三个参数.  \n`pattern`是要匹配的文件和匹配模式  \n`served`用于该文件是否由karma webserver提供  \n`included`浏览器是否需要通过`<script>`标签引入该文件  \n\n为什么我要将部分文件设置成`included:false`手动加载呢？  \n这是因为部分js文件加载是由`newifi.js`，通过ajax加载进去的。如果，直接`included`进karma webserver就会报错（找不到函数或者变量没定义）。  \n但是，这样还是不能正常加载这些js文件的。在执行`newifi.js`时，ajax加载这部分js文件会提示404.\n这是因为karma将加载后的文件移到`http:\\\\localhost:[port]\\base`下了。所以，你还要设置`proxies`参数.将ajax加载`/newifi`下的js文件指向`/base/newifi`\n","slug":"karma-config-note","published":1,"updated":"2018-05-15T09:34:12.213Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjh7he6r400092gu2rxpk5l66","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = function(config) &#123;</span><br><span class=\"line\">    var globSync = require(&quot;glob&quot;).sync;</span><br><span class=\"line\">    var files = globSync(&apos;newifi/@(jquery*|newifi).js&apos;, &#123; cwd: &apos;web/htdocs&apos; &#125;);</span><br><span class=\"line\">    var otherJsFiles = globSync(&apos;newifi/**/!(jquery*|newifi|angular*|bootstrap|echarts*).&#123;js,json&#125;&apos;, &#123; cwd: &apos;web/htdocs&apos; &#125;);</span><br><span class=\"line\">    var cssFiles = globSync(&apos;newifi/**/*.css&apos;, &#123; cwd: &apos;web/htdocs&apos; &#125;);</span><br><span class=\"line\">    files.push(&apos;index.html&apos;);</span><br><span class=\"line\">    files.push(&apos;../../test/*.coffee&apos;);</span><br><span class=\"line\">    files.push(&apos;../../test/*.js&apos;);</span><br><span class=\"line\">    otherJsFiles.forEach(function(file)&#123;</span><br><span class=\"line\">        files.push(&#123;</span><br><span class=\"line\">            pattern: file,</span><br><span class=\"line\">            served: true,</span><br><span class=\"line\">            included: false</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    cssFiles.forEach(function(file)&#123;</span><br><span class=\"line\">        files.push(&#123;</span><br><span class=\"line\">            pattern: file,</span><br><span class=\"line\">            served: true,</span><br><span class=\"line\">            included: false</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    config.set(&#123;</span><br><span class=\"line\">        // base path that will be used to resolve all patterns (eg. files, exclude)</span><br><span class=\"line\">        basePath: &apos;web/htdocs/&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // frameworks to use</span><br><span class=\"line\">        // available frameworks: https://npmjs.org/browse/keyword/karma-adapter</span><br><span class=\"line\">        frameworks: [&apos;jasmine-jquery&apos;, &apos;jasmine&apos;, &apos;jasmine-matchers&apos;],</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // list of files / patterns to load in the browser</span><br><span class=\"line\">        files: files,</span><br><span class=\"line\"></span><br><span class=\"line\">        // list of files to exclude</span><br><span class=\"line\">        exclude: [],</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // preprocess matching files before serving them to the browser</span><br><span class=\"line\">        // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor</span><br><span class=\"line\">        preprocessors: &#123;</span><br><span class=\"line\">            &apos;**/*.html&apos;: [&apos;html2js&apos;],</span><br><span class=\"line\">            &apos;../../**/*.coffee&apos;: [&apos;coffee&apos;, &apos;coverage&apos;]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        proxies: &#123;</span><br><span class=\"line\">            &apos;/newifi&apos;: &apos;/base/newifi&apos;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        // test results reporter to use</span><br><span class=\"line\">        // possible values: &apos;dots&apos;, &apos;progress&apos;</span><br><span class=\"line\">        // available reporters: https://npmjs.org/browse/keyword/karma-reporter</span><br><span class=\"line\">        reporters: [&apos;progress&apos;],</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // web server port</span><br><span class=\"line\">        port: 9876,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // enable / disable colors in the output (reporters and logs)</span><br><span class=\"line\">        colors: true,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // level of logging</span><br><span class=\"line\">        // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG</span><br><span class=\"line\">        logLevel: config.LOG_INFO,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // enable / disable watching file and executing tests whenever any file changes</span><br><span class=\"line\">        autoWatch: true,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // start these browsers</span><br><span class=\"line\">        // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher</span><br><span class=\"line\">        browsers: [&apos;PhantomJS&apos;],</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // Continuous Integration mode</span><br><span class=\"line\">        // if true, Karma captures browsers, runs the tests and exits</span><br><span class=\"line\">        singleRun: false,</span><br><span class=\"line\"></span><br><span class=\"line\">        // Concurrency level</span><br><span class=\"line\">        // how many browser should be started simultaneous</span><br><span class=\"line\">        concurrency: Infinity</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>上面是我的配置文件<br><a id=\"more\"></a><br>首先，说明下basePath参数。这个参数设置了<code>web/htdocs/</code>，这个作用是在<code>files</code>和<code>exclude</code>两个参数里面不用再写这部分路径的匹配了。<br>但是，我这个项目的<code>test</code>目录在<code>web/htdocs/</code>外,所以还要补上<code>../../</code>。否则会匹配不上。</p>\n<p>然后，我们再看看<code>files</code>参数下面这三个参数<code>pattern</code>、<code>served</code>和<code>included</code>这三个参数.<br><code>pattern</code>是要匹配的文件和匹配模式<br><code>served</code>用于该文件是否由karma webserver提供<br><code>included</code>浏览器是否需要通过<code>&lt;script&gt;</code>标签引入该文件  </p>\n<p>为什么我要将部分文件设置成<code>included:false</code>手动加载呢？<br>这是因为部分js文件加载是由<code>newifi.js</code>，通过ajax加载进去的。如果，直接<code>included</code>进karma webserver就会报错（找不到函数或者变量没定义）。<br>但是，这样还是不能正常加载这些js文件的。在执行<code>newifi.js</code>时，ajax加载这部分js文件会提示404.<br>这是因为karma将加载后的文件移到<code>http:\\\\localhost:[port]\\base</code>下了。所以，你还要设置<code>proxies</code>参数.将ajax加载<code>/newifi</code>下的js文件指向<code>/base/newifi</code></p>\n","site":{"data":{}},"excerpt":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = function(config) &#123;</span><br><span class=\"line\">    var globSync = require(&quot;glob&quot;).sync;</span><br><span class=\"line\">    var files = globSync(&apos;newifi/@(jquery*|newifi).js&apos;, &#123; cwd: &apos;web/htdocs&apos; &#125;);</span><br><span class=\"line\">    var otherJsFiles = globSync(&apos;newifi/**/!(jquery*|newifi|angular*|bootstrap|echarts*).&#123;js,json&#125;&apos;, &#123; cwd: &apos;web/htdocs&apos; &#125;);</span><br><span class=\"line\">    var cssFiles = globSync(&apos;newifi/**/*.css&apos;, &#123; cwd: &apos;web/htdocs&apos; &#125;);</span><br><span class=\"line\">    files.push(&apos;index.html&apos;);</span><br><span class=\"line\">    files.push(&apos;../../test/*.coffee&apos;);</span><br><span class=\"line\">    files.push(&apos;../../test/*.js&apos;);</span><br><span class=\"line\">    otherJsFiles.forEach(function(file)&#123;</span><br><span class=\"line\">        files.push(&#123;</span><br><span class=\"line\">            pattern: file,</span><br><span class=\"line\">            served: true,</span><br><span class=\"line\">            included: false</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    cssFiles.forEach(function(file)&#123;</span><br><span class=\"line\">        files.push(&#123;</span><br><span class=\"line\">            pattern: file,</span><br><span class=\"line\">            served: true,</span><br><span class=\"line\">            included: false</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    config.set(&#123;</span><br><span class=\"line\">        // base path that will be used to resolve all patterns (eg. files, exclude)</span><br><span class=\"line\">        basePath: &apos;web/htdocs/&apos;,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // frameworks to use</span><br><span class=\"line\">        // available frameworks: https://npmjs.org/browse/keyword/karma-adapter</span><br><span class=\"line\">        frameworks: [&apos;jasmine-jquery&apos;, &apos;jasmine&apos;, &apos;jasmine-matchers&apos;],</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // list of files / patterns to load in the browser</span><br><span class=\"line\">        files: files,</span><br><span class=\"line\"></span><br><span class=\"line\">        // list of files to exclude</span><br><span class=\"line\">        exclude: [],</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // preprocess matching files before serving them to the browser</span><br><span class=\"line\">        // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor</span><br><span class=\"line\">        preprocessors: &#123;</span><br><span class=\"line\">            &apos;**/*.html&apos;: [&apos;html2js&apos;],</span><br><span class=\"line\">            &apos;../../**/*.coffee&apos;: [&apos;coffee&apos;, &apos;coverage&apos;]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        proxies: &#123;</span><br><span class=\"line\">            &apos;/newifi&apos;: &apos;/base/newifi&apos;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        // test results reporter to use</span><br><span class=\"line\">        // possible values: &apos;dots&apos;, &apos;progress&apos;</span><br><span class=\"line\">        // available reporters: https://npmjs.org/browse/keyword/karma-reporter</span><br><span class=\"line\">        reporters: [&apos;progress&apos;],</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // web server port</span><br><span class=\"line\">        port: 9876,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // enable / disable colors in the output (reporters and logs)</span><br><span class=\"line\">        colors: true,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // level of logging</span><br><span class=\"line\">        // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG</span><br><span class=\"line\">        logLevel: config.LOG_INFO,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // enable / disable watching file and executing tests whenever any file changes</span><br><span class=\"line\">        autoWatch: true,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // start these browsers</span><br><span class=\"line\">        // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher</span><br><span class=\"line\">        browsers: [&apos;PhantomJS&apos;],</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        // Continuous Integration mode</span><br><span class=\"line\">        // if true, Karma captures browsers, runs the tests and exits</span><br><span class=\"line\">        singleRun: false,</span><br><span class=\"line\"></span><br><span class=\"line\">        // Concurrency level</span><br><span class=\"line\">        // how many browser should be started simultaneous</span><br><span class=\"line\">        concurrency: Infinity</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>上面是我的配置文件<br>","more":"<br>首先，说明下basePath参数。这个参数设置了<code>web/htdocs/</code>，这个作用是在<code>files</code>和<code>exclude</code>两个参数里面不用再写这部分路径的匹配了。<br>但是，我这个项目的<code>test</code>目录在<code>web/htdocs/</code>外,所以还要补上<code>../../</code>。否则会匹配不上。</p>\n<p>然后，我们再看看<code>files</code>参数下面这三个参数<code>pattern</code>、<code>served</code>和<code>included</code>这三个参数.<br><code>pattern</code>是要匹配的文件和匹配模式<br><code>served</code>用于该文件是否由karma webserver提供<br><code>included</code>浏览器是否需要通过<code>&lt;script&gt;</code>标签引入该文件  </p>\n<p>为什么我要将部分文件设置成<code>included:false</code>手动加载呢？<br>这是因为部分js文件加载是由<code>newifi.js</code>，通过ajax加载进去的。如果，直接<code>included</code>进karma webserver就会报错（找不到函数或者变量没定义）。<br>但是，这样还是不能正常加载这些js文件的。在执行<code>newifi.js</code>时，ajax加载这部分js文件会提示404.<br>这是因为karma将加载后的文件移到<code>http:\\\\localhost:[port]\\base</code>下了。所以，你还要设置<code>proxies</code>参数.将ajax加载<code>/newifi</code>下的js文件指向<code>/base/newifi</code></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjh7he6qv00052gu2dtcez11z","category_id":"cjh7he6rb000e2gu26zpmouum","_id":"cjh7he6rg000i2gu2tsw493hi"},{"post_id":"cjh7he6qz00062gu2jl876s7f","category_id":"cjh7he6rg000j2gu2yacm196u","_id":"cjh7he6rk000r2gu29ypa46cv"},{"post_id":"cjh7he6r400092gu2rxpk5l66","category_id":"cjh7he6rg000j2gu2yacm196u","_id":"cjh7he6rl000t2gu250gan0r9"},{"post_id":"cjh7he6ot00002gu2xcc5wy6v","category_id":"cjh7he6qd00022gu2svl9q2rc","_id":"cjh7he6rr00172gu2qvv0kc2o"},{"post_id":"cjh7he6oz00012gu2iq1f35z8","category_id":"cjh7he6qd00022gu2svl9q2rc","_id":"cjh7hhfex0000aku2ubw05ikw"},{"post_id":"cjh7he6qo00042gu2jkwo38hz","category_id":"cjh7he6qd00022gu2svl9q2rc","_id":"cjh7hhfey0001aku2mx0xkb5s"}],"PostTag":[{"post_id":"cjh7he6ot00002gu2xcc5wy6v","tag_id":"cjh7he6ql00032gu25ia5lnie","_id":"cjh7he6rb000c2gu2u05fubwl"},{"post_id":"cjh7he6ot00002gu2xcc5wy6v","tag_id":"cjh7he6r300082gu2xs47am8w","_id":"cjh7he6rb000d2gu296kck2vr"},{"post_id":"cjh7he6oz00012gu2iq1f35z8","tag_id":"cjh7he6r8000b2gu2db5b7660","_id":"cjh7he6ri000l2gu260a3g4h6"},{"post_id":"cjh7he6oz00012gu2iq1f35z8","tag_id":"cjh7he6rc000f2gu2z8r7yd97","_id":"cjh7he6ri000m2gu2ixrow0se"},{"post_id":"cjh7he6oz00012gu2iq1f35z8","tag_id":"cjh7he6rf000h2gu2djg3mryp","_id":"cjh7he6rj000p2gu21b0pl5gs"},{"post_id":"cjh7he6qo00042gu2jkwo38hz","tag_id":"cjh7he6r8000b2gu2db5b7660","_id":"cjh7he6rn000w2gu2up7ppqbz"},{"post_id":"cjh7he6qo00042gu2jkwo38hz","tag_id":"cjh7he6rj000o2gu2wb0ri5o1","_id":"cjh7he6rp000z2gu2a7yjuse5"},{"post_id":"cjh7he6qo00042gu2jkwo38hz","tag_id":"cjh7he6rl000s2gu2mwnit91p","_id":"cjh7he6rq00122gu2n92wws9k"},{"post_id":"cjh7he6qv00052gu2dtcez11z","tag_id":"cjh7he6rm000v2gu24u1qfm7b","_id":"cjh7he6rr00162gu2prj2k6nc"},{"post_id":"cjh7he6qv00052gu2dtcez11z","tag_id":"cjh7he6rp00102gu2v78xidrr","_id":"cjh7he6rs00182gu2xed7vueg"},{"post_id":"cjh7he6qz00062gu2jl876s7f","tag_id":"cjh7he6rq00142gu2k8f6mhd5","_id":"cjh7he6rt001d2gu2q3an1nn7"},{"post_id":"cjh7he6qz00062gu2jl876s7f","tag_id":"cjh7he6rs00192gu2lst01oxf","_id":"cjh7he6ru001e2gu2liu1rtom"},{"post_id":"cjh7he6r400092gu2rxpk5l66","tag_id":"cjh7he6rq00142gu2k8f6mhd5","_id":"cjh7he6rv001g2gu2z2dqr6bp"},{"post_id":"cjh7he6r400092gu2rxpk5l66","tag_id":"cjh7he6rs00192gu2lst01oxf","_id":"cjh7he6rw001h2gu2cdh41ic7"}],"Tag":[{"name":"testing","_id":"cjh7he6ql00032gu25ia5lnie"},{"name":"angular testing","_id":"cjh7he6r300082gu2xs47am8w"},{"name":"angular","_id":"cjh7he6r8000b2gu2db5b7660"},{"name":"formControl","_id":"cjh7he6rc000f2gu2z8r7yd97"},{"name":"component","_id":"cjh7he6rf000h2gu2djg3mryp"},{"name":"openwrt","_id":"cjh7he6rj000o2gu2wb0ri5o1"},{"name":"ubus","_id":"cjh7he6rl000s2gu2mwnit91p"},{"name":"docker","_id":"cjh7he6rm000v2gu24u1qfm7b"},{"name":"docker-compose","_id":"cjh7he6rp00102gu2v78xidrr"},{"name":"karma","_id":"cjh7he6rq00142gu2k8f6mhd5"},{"name":"测试框架","_id":"cjh7he6rs00192gu2lst01oxf"}]}}