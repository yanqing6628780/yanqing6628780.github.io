{"meta":{"title":"山姆的博客","subtitle":"sam leung","description":"谛听科技 phper 前端","author":"sam leung","url":"http://yanqing6628780.github.io"},"pages":[{"title":"关于  我","date":"2017-02-28T16:52:44.000Z","updated":"2018-05-15T09:58:35.868Z","comments":true,"path":"about/index.html","permalink":"http://yanqing6628780.github.io/about/index.html","excerpt":"","text":"曾经我以为php是世界上最好的语言现在我觉得JS也是开玩笑！摔！ 现就职于深圳谛听科技捣鼓各种前端工具负责newifi和pandorabox路由器前端开发"},{"title":"categories","date":"2017-02-16T17:42:08.000Z","updated":"2018-05-15T09:58:35.868Z","comments":true,"path":"categories/index.html","permalink":"http://yanqing6628780.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"angular-testing","slug":"angular-testing","date":"2018-05-15T12:03:55.000Z","updated":"2018-05-15T09:58:35.868Z","comments":true,"path":"2018/05/15/angular-testing/","link":"","permalink":"http://yanqing6628780.github.io/2018/05/15/angular-testing/","excerpt":"","text":"这是一篇流水账式记录angular测试时遇到的问题和想法。 在这个项目内的api.service，我注入了HttpClient、NzNotificationService、router三个服务。在测试api.service时，你测试的是router服务的navigate方法有没有被调用，而且输入什么参数。这时，你要使用jasmine的spy监视对router下的navigate方法。而不是，检查浏览器地址栏是否有发生变化。难道我们就不要检查浏览器地址栏的变化吗？其实，还是要的。不过，这应该是交给router服务本身的测试来做。这才是模块化的思想，各模块能独立加载，有自身的单元测试。 然后，是对登录页组件的测试。对于login.spec.ts这个测试文件的内容，主要还是记录下jasmine.createSpyObj这个方法。我用这个方法创建了一个AuthService的spy。这个spy是监视点击登录按钮时，触发的组件内的submit函数。submit执行时会调用AuthService的login方法。此时，我们不需要用httpMock方式来模拟网络请求数据了，可以直接调用AuthService.login(这个服务和方法现在是jasmine创建的spy)下的returnValue来立刻返回结果，这样我们就可以直接测试authService.login.subscribe回调函数内的代码。那为什么可以不用httpMock模拟网络请求呢？这就是上面提到的各自独立加载和有测试单元了。我们已经对AuthService这个服务写过单元测试了，保证了他的功能正常。然后，到我们的对组件测试时，我们就没必要再重复这个模拟过程了。","categories":[{"name":"angular","slug":"angular","permalink":"http://yanqing6628780.github.io/categories/angular/"}],"tags":[{"name":"testing","slug":"testing","permalink":"http://yanqing6628780.github.io/tags/testing/"},{"name":"angular testing","slug":"angular-testing","permalink":"http://yanqing6628780.github.io/tags/angular-testing/"}]},{"title":"开发angular上的formControl组件","slug":"angular-component-formcontrol","date":"2018-05-15T12:02:59.000Z","updated":"2018-05-15T09:58:35.868Z","comments":true,"path":"2018/05/15/angular-component-formcontrol/","link":"","permalink":"http://yanqing6628780.github.io/2018/05/15/angular-component-formcontrol/","excerpt":"","text":"一个简单的密码显示隐藏组件，是对ant desigin of angular的nz-input组件的二次封装。 文件源代码：https://github.com/BoxSystem/StoreBox-ng2/blob/master/src/app/components/password-eye/index.ts 看文件的提交历史。其实，一开始是没考虑formControl的支持的。不使用formControl的情况，只要使用EventEmitter触发事件进行组件间交互就好。当你需要在页面组件使用FormBuilder时，你就需要在页面元素上绑定formControlName属性。但是，当你需要将html元素二次封装成组件时，你的组件必须implements`ControlValueAccessor这个接口。并且，实现接口下面的三个方法writeValueregisterOnChangeregisterOnTouched`。实现了这个三方法后，上面EventEmitter触发的交互事件已经不需要了。","categories":[{"name":"angular","slug":"angular","permalink":"http://yanqing6628780.github.io/categories/angular/"}],"tags":[{"name":"angular","slug":"angular","permalink":"http://yanqing6628780.github.io/tags/angular/"},{"name":"formControl","slug":"formControl","permalink":"http://yanqing6628780.github.io/tags/formControl/"},{"name":"component","slug":"component","permalink":"http://yanqing6628780.github.io/tags/component/"}]},{"title":"应用在openwrt固件上的angular项目","slug":"angular-ubus-openwrt","date":"2018-01-11T14:00:00.000Z","updated":"2018-05-15T09:58:35.868Z","comments":true,"path":"2018/01/11/angular-ubus-openwrt/","link":"","permalink":"http://yanqing6628780.github.io/2018/01/11/angular-ubus-openwrt/","excerpt":"","text":"项目地址：https://github.com/yanqing6628780/angular2_ubus_openwrt 该项目是在公司的pandorabox固件的ubus接口下，使用angular进行开发尝试。所以，要运行该项目： 你需要一个路由器 该路由器需要刷入pandorabox或者openwrt固件 固件内需要有以下ubus命令： session uci 如果你路由器不是192.168.1.1的ip，你还需要修改proxy.conf.json文件。 该项目是从angular的hero项目clone下来后直接修改的。只app内的文件，其他配置基本没有修改。用到的知识点如下： 路由拆分 http拦截器 路由守卫(鉴权) 延迟加载(这个没看出效果) 使用ng-zorro-antd 组件二次封装(难点1) 其实，按照hero项目的教程看下来，你基本能掌握大部分技能。但是，要真正学习到知识还是要用实际项目练手。就好像难点1那里，这里的封装需了解 如何对数据进行双向绑定 如何从组件输入后输出现在angular不像angular1的Directive可以直接使用scope进行双向绑定你还要使用各种装饰器@Input @Output还要使用EventEmitter进行事件触发。详细请看password_eye目录下.ts文件 据说，这样做的目的是为了减少像angular1那样的全局脏检查，性能会更好。但是，开发就麻烦和复杂了。 总结angular开发还是要配合vscode进行开发，不然import库的时候真的好麻烦还有现在引入的组件概念。其实，你把这个组件当成angular1的控制器，就比较容易理解。但是，angular1的Directive现在也是归到@Component的。你在angular里面使用@Directive是没法引入template和templateUrl这些参数的。所以，angular的@Directive又是另外一个概念了而且，angular现在也解决了angular1时的少问题。例如：双view。而且，route比以前强大，有守卫、延迟加载、还有延迟预加载。不过，angular有个比较麻烦的‘缺点’。例如：父组件的模板上有个tilte变量，这个变量是用在head标签内的title标签。如果，想要子组件内赋值，你只能使用service这种形式，然后这个变量要用Rxjx的Observable。子组件要注入这个service，父组件对其进行订阅。暂时，使用angular的感受就是这样了。如果项目能继续深入应该会有发现更多‘问题’，解决更多问题，这样对angular有更多和更深入的了解。","categories":[{"name":"angular","slug":"angular","permalink":"http://yanqing6628780.github.io/categories/angular/"}],"tags":[{"name":"angular","slug":"angular","permalink":"http://yanqing6628780.github.io/tags/angular/"},{"name":"openwrt","slug":"openwrt","permalink":"http://yanqing6628780.github.io/tags/openwrt/"},{"name":"ubus","slug":"ubus","permalink":"http://yanqing6628780.github.io/tags/ubus/"}]},{"title":"docker 挂载目录造成程序无法找到文件","slug":"docker-mount","date":"2018-01-11T10:24:03.000Z","updated":"2018-05-15T09:58:35.868Z","comments":true,"path":"2018/01/11/docker-mount/","link":"","permalink":"http://yanqing6628780.github.io/2018/01/11/docker-mount/","excerpt":"","text":"12345678910111213141516171819db: image: mongo volumes: - ~/www/db:/data container_name: db restart: alwayswww: build: . ports: - &quot;12333:8000&quot; volumes: - ~/www/logs:/www/logs - ~/www/public:/www/public - ~/www/config:/www/config links: - db container_name: www_authbox restart: always 以上是docker-compose配置。有问题是这里 - ~/www/config:/www/configconfig目录是用来放置程序配置文件的如果将config目录挂载后，npm start启动程序时，程序查找config目录下文件会提示找不到文件的错误。但是，文件其实已经在构建时拷贝到config目录下了。这是docker挂载的bug呢？还是写法有问题呢？暂时未找到原因 解决方案如下： 不要挂载config目录 根据同事建议，迟延npm start。如使用sleep。或者在\\bin\\www增加timeout代码","categories":[{"name":"运维","slug":"运维","permalink":"http://yanqing6628780.github.io/categories/运维/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://yanqing6628780.github.io/tags/docker/"},{"name":"docker-compose","slug":"docker-compose","permalink":"http://yanqing6628780.github.io/tags/docker-compose/"}]},{"title":"karma配置参数笔记(2)","slug":"karma-config-note-2","date":"2017-02-21T16:39:11.000Z","updated":"2018-05-15T09:58:35.868Z","comments":true,"path":"2017/02/21/karma-config-note-2/","link":"","permalink":"http://yanqing6628780.github.io/2017/02/21/karma-config-note-2/","excerpt":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788module.exports = function(config) &#123; var files = []; files.push(&apos;newifi/@(jquery*|newifi).js&apos;); files.push(&apos;index.html&apos;); files.push(&apos;../../test/*.coffee&apos;); files.push(&apos;../../test/*.js&apos;); var otherFiles = [ &apos;newifi/**/!(jquery*|newifi|angular*|bootstrap|echarts*).js&apos;, &apos;newifi/**/*.css&apos;, &apos;newifi/**/*.json&apos; ]; otherFiles.forEach((file) =&gt; &#123; files.push(&#123; pattern: file, served: true, included: false &#125;); &#125;); var preprocessors = &#123; &apos;**/*.html&apos;: [&apos;html2js&apos;], &apos;../../**/*.coffee&apos;: [&apos;coffee&apos;] &#125;; preprocessors[otherFiles[0]] = [&apos;coverage&apos;]; config.set(&#123; // base path that will be used to resolve all patterns (eg. files, exclude) basePath: &apos;web/htdocs/&apos;, // frameworks to use // available frameworks: https://npmjs.org/browse/keyword/karma-adapter frameworks: [&apos;jasmine-jquery&apos;, &apos;jasmine&apos;, &apos;jasmine-matchers&apos;], // list of files / patterns to load in the browser files: files, // list of files to exclude exclude: [], // preprocess matching files before serving them to the browser // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor preprocessors: preprocessors, proxies: &#123; &apos;/newifi&apos;: &apos;/base/newifi&apos; &#125;, // test results reporter to use // possible values: &apos;dots&apos;, &apos;progress&apos; // available reporters: https://npmjs.org/browse/keyword/karma-reporter reporters: [&apos;progress&apos;, &apos;kjhtml&apos;, &apos;coverage&apos;], coverageReporter: &#123; type: &apos;html&apos;, dir: &apos;../../coverage/&apos; &#125;, // web server port port: 9876, // enable / disable colors in the output (reporters and logs) colors: true, // level of logging // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG logLevel: config.LOG_INFO, // enable / disable watching file and executing tests whenever any file changes autoWatch: true, // start these browsers // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher browsers: [&apos;PhantomJS&apos;], // Continuous Integration mode // if true, Karma captures browsers, runs the tests and exits singleRun: false, // Concurrency level // how many browser should be started simultaneous concurrency: Infinity &#125;);&#125;; 这是改进后的配置文件。上一篇里面用glob获取所有匹配文件，然后一个个加文件的做法其实是多余的。经过试验，其实karma的文件匹配方式是支持glob那套的。","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788module.exports = function(config) &#123; var files = []; files.push(&apos;newifi/@(jquery*|newifi).js&apos;); files.push(&apos;index.html&apos;); files.push(&apos;../../test/*.coffee&apos;); files.push(&apos;../../test/*.js&apos;); var otherFiles = [ &apos;newifi/**/!(jquery*|newifi|angular*|bootstrap|echarts*).js&apos;, &apos;newifi/**/*.css&apos;, &apos;newifi/**/*.json&apos; ]; otherFiles.forEach((file) =&gt; &#123; files.push(&#123; pattern: file, served: true, included: false &#125;); &#125;); var preprocessors = &#123; &apos;**/*.html&apos;: [&apos;html2js&apos;], &apos;../../**/*.coffee&apos;: [&apos;coffee&apos;] &#125;; preprocessors[otherFiles[0]] = [&apos;coverage&apos;]; config.set(&#123; // base path that will be used to resolve all patterns (eg. files, exclude) basePath: &apos;web/htdocs/&apos;, // frameworks to use // available frameworks: https://npmjs.org/browse/keyword/karma-adapter frameworks: [&apos;jasmine-jquery&apos;, &apos;jasmine&apos;, &apos;jasmine-matchers&apos;], // list of files / patterns to load in the browser files: files, // list of files to exclude exclude: [], // preprocess matching files before serving them to the browser // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor preprocessors: preprocessors, proxies: &#123; &apos;/newifi&apos;: &apos;/base/newifi&apos; &#125;, // test results reporter to use // possible values: &apos;dots&apos;, &apos;progress&apos; // available reporters: https://npmjs.org/browse/keyword/karma-reporter reporters: [&apos;progress&apos;, &apos;kjhtml&apos;, &apos;coverage&apos;], coverageReporter: &#123; type: &apos;html&apos;, dir: &apos;../../coverage/&apos; &#125;, // web server port port: 9876, // enable / disable colors in the output (reporters and logs) colors: true, // level of logging // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG logLevel: config.LOG_INFO, // enable / disable watching file and executing tests whenever any file changes autoWatch: true, // start these browsers // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher browsers: [&apos;PhantomJS&apos;], // Continuous Integration mode // if true, Karma captures browsers, runs the tests and exits singleRun: false, // Concurrency level // how many browser should be started simultaneous concurrency: Infinity &#125;);&#125;; 这是改进后的配置文件。上一篇里面用glob获取所有匹配文件，然后一个个加文件的做法其实是多余的。经过试验，其实karma的文件匹配方式是支持glob那套的。 然后，新配置内添加kjhtml插件和coverage插件。kjhtml插件的作用是将karma服务器的debug页变成测试结果页。而且，在debug页点击其中一个测试结果，该测试都会重新执行一遍。不过，可惜的是，修改测试文件后不会自动刷新。coverage插件是覆盖测试报告。上面配置文件里面的这句:1preprocessors[otherFiles[0]] = [&apos;coverage&apos;]; 表示那些被测试的文件需要代码覆盖测试报告。","categories":[{"name":"测试","slug":"测试","permalink":"http://yanqing6628780.github.io/categories/测试/"}],"tags":[{"name":"karma","slug":"karma","permalink":"http://yanqing6628780.github.io/tags/karma/"},{"name":"测试框架","slug":"测试框架","permalink":"http://yanqing6628780.github.io/tags/测试框架/"}]},{"title":"karma配置参数笔记","slug":"karma-config-note","date":"2017-02-16T16:04:10.000Z","updated":"2018-05-15T09:58:35.868Z","comments":true,"path":"2017/02/16/karma-config-note/","link":"","permalink":"http://yanqing6628780.github.io/2017/02/16/karma-config-note/","excerpt":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586module.exports = function(config) &#123; var globSync = require(&quot;glob&quot;).sync; var files = globSync(&apos;newifi/@(jquery*|newifi).js&apos;, &#123; cwd: &apos;web/htdocs&apos; &#125;); var otherJsFiles = globSync(&apos;newifi/**/!(jquery*|newifi|angular*|bootstrap|echarts*).&#123;js,json&#125;&apos;, &#123; cwd: &apos;web/htdocs&apos; &#125;); var cssFiles = globSync(&apos;newifi/**/*.css&apos;, &#123; cwd: &apos;web/htdocs&apos; &#125;); files.push(&apos;index.html&apos;); files.push(&apos;../../test/*.coffee&apos;); files.push(&apos;../../test/*.js&apos;); otherJsFiles.forEach(function(file)&#123; files.push(&#123; pattern: file, served: true, included: false &#125;); &#125;); cssFiles.forEach(function(file)&#123; files.push(&#123; pattern: file, served: true, included: false &#125;); &#125;); config.set(&#123; // base path that will be used to resolve all patterns (eg. files, exclude) basePath: &apos;web/htdocs/&apos;, // frameworks to use // available frameworks: https://npmjs.org/browse/keyword/karma-adapter frameworks: [&apos;jasmine-jquery&apos;, &apos;jasmine&apos;, &apos;jasmine-matchers&apos;], // list of files / patterns to load in the browser files: files, // list of files to exclude exclude: [], // preprocess matching files before serving them to the browser // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor preprocessors: &#123; &apos;**/*.html&apos;: [&apos;html2js&apos;], &apos;../../**/*.coffee&apos;: [&apos;coffee&apos;, &apos;coverage&apos;] &#125;, proxies: &#123; &apos;/newifi&apos;: &apos;/base/newifi&apos; &#125;, // test results reporter to use // possible values: &apos;dots&apos;, &apos;progress&apos; // available reporters: https://npmjs.org/browse/keyword/karma-reporter reporters: [&apos;progress&apos;], // web server port port: 9876, // enable / disable colors in the output (reporters and logs) colors: true, // level of logging // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG logLevel: config.LOG_INFO, // enable / disable watching file and executing tests whenever any file changes autoWatch: true, // start these browsers // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher browsers: [&apos;PhantomJS&apos;], // Continuous Integration mode // if true, Karma captures browsers, runs the tests and exits singleRun: false, // Concurrency level // how many browser should be started simultaneous concurrency: Infinity &#125;);&#125;; 上面是我的配置文件","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586module.exports = function(config) &#123; var globSync = require(&quot;glob&quot;).sync; var files = globSync(&apos;newifi/@(jquery*|newifi).js&apos;, &#123; cwd: &apos;web/htdocs&apos; &#125;); var otherJsFiles = globSync(&apos;newifi/**/!(jquery*|newifi|angular*|bootstrap|echarts*).&#123;js,json&#125;&apos;, &#123; cwd: &apos;web/htdocs&apos; &#125;); var cssFiles = globSync(&apos;newifi/**/*.css&apos;, &#123; cwd: &apos;web/htdocs&apos; &#125;); files.push(&apos;index.html&apos;); files.push(&apos;../../test/*.coffee&apos;); files.push(&apos;../../test/*.js&apos;); otherJsFiles.forEach(function(file)&#123; files.push(&#123; pattern: file, served: true, included: false &#125;); &#125;); cssFiles.forEach(function(file)&#123; files.push(&#123; pattern: file, served: true, included: false &#125;); &#125;); config.set(&#123; // base path that will be used to resolve all patterns (eg. files, exclude) basePath: &apos;web/htdocs/&apos;, // frameworks to use // available frameworks: https://npmjs.org/browse/keyword/karma-adapter frameworks: [&apos;jasmine-jquery&apos;, &apos;jasmine&apos;, &apos;jasmine-matchers&apos;], // list of files / patterns to load in the browser files: files, // list of files to exclude exclude: [], // preprocess matching files before serving them to the browser // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor preprocessors: &#123; &apos;**/*.html&apos;: [&apos;html2js&apos;], &apos;../../**/*.coffee&apos;: [&apos;coffee&apos;, &apos;coverage&apos;] &#125;, proxies: &#123; &apos;/newifi&apos;: &apos;/base/newifi&apos; &#125;, // test results reporter to use // possible values: &apos;dots&apos;, &apos;progress&apos; // available reporters: https://npmjs.org/browse/keyword/karma-reporter reporters: [&apos;progress&apos;], // web server port port: 9876, // enable / disable colors in the output (reporters and logs) colors: true, // level of logging // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG logLevel: config.LOG_INFO, // enable / disable watching file and executing tests whenever any file changes autoWatch: true, // start these browsers // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher browsers: [&apos;PhantomJS&apos;], // Continuous Integration mode // if true, Karma captures browsers, runs the tests and exits singleRun: false, // Concurrency level // how many browser should be started simultaneous concurrency: Infinity &#125;);&#125;; 上面是我的配置文件首先，说明下basePath参数。这个参数设置了web/htdocs/，这个作用是在files和exclude两个参数里面不用再写这部分路径的匹配了。但是，我这个项目的test目录在web/htdocs/外,所以还要补上../../。否则会匹配不上。 然后，我们再看看files参数下面这三个参数pattern、served和included这三个参数.pattern是要匹配的文件和匹配模式served用于该文件是否由karma webserver提供included浏览器是否需要通过&lt;script&gt;标签引入该文件 为什么我要将部分文件设置成included:false手动加载呢？这是因为部分js文件加载是由newifi.js，通过ajax加载进去的。如果，直接included进karma webserver就会报错（找不到函数或者变量没定义）。但是，这样还是不能正常加载这些js文件的。在执行newifi.js时，ajax加载这部分js文件会提示404.这是因为karma将加载后的文件移到http:\\\\localhost:[port]\\base下了。所以，你还要设置proxies参数.将ajax加载/newifi下的js文件指向/base/newifi","categories":[{"name":"测试","slug":"测试","permalink":"http://yanqing6628780.github.io/categories/测试/"}],"tags":[{"name":"karma","slug":"karma","permalink":"http://yanqing6628780.github.io/tags/karma/"},{"name":"测试框架","slug":"测试框架","permalink":"http://yanqing6628780.github.io/tags/测试框架/"}]}]}